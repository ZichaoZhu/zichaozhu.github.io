{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u535a\u5ba2\uff01","text":""},{"location":"#_2","title":"\u524d\u8a00","text":"<p>\u6574\u4e2a\u535a\u5ba2\u7684\u521b\u5efa\u771f\u7684\u662f\u82b1\u4e86\u6211\u597d\u957f\u7684\u65f6\u95f4\uff0c\u521b\u5efa\u6210\u529f\u540e\u8fd8\u662f\u5f88\u5f00\u5fc3\u7684\u3002  \u5728\u8fd9\u6b21\u7684\u521b\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u6211\u5145\u5206\u4f53\u4f1a\u5230\u4e86Edge\u6d4f\u89c8\u5668\u5728\u5f00\u53d1\u5c42\u9762\u7684\u4e0d\u8db3\uff0c\u4ee5\u540e\u641e\u5f00\u53d1\u7684\u8bdd\u8fd8\u662f\u4f7f\u7528chrome\u5427\uff0c\u771f\u7684\u597d\u7528\u3002</p>"},{"location":"blog/ADS/","title":"ADS","text":""},{"location":"blog/ADS/#flip-class","title":"Flip class","text":""},{"location":"blog/ADS/#_1","title":"\u65f6\u95f4","text":"<p>\u7b2c\u4e8c\u8282\u8bfe\u5f00\u59cb\uff0c10\uff1a00~11\uff1a35</p>"},{"location":"blog/ADS/#_2","title":"\u8ba8\u8bba","text":"<p>\u95ee\u9898\u9700\u8981\u5728\u7cfb\u7edf\u4e2d\u4e0a\u4f20\u63d0\u4ea4\uff0c\u4e0b\u53481\u70b9\u4e0a\u4f20\uff0c\u7b54\u6848\u53ef\u4ee5\u53cd\u590d\u4ea4</p>"},{"location":"blog/ADS/#_3","title":"\u8bfe\u7a0b\u8bc4\u5206\u65b9\u6cd5","text":"<ul> <li>\u671f\u672b\u5377\u9762\u6210\u7ee9\u9700\u8981\u9ad8\u4e8e40\u5206</li> </ul>"},{"location":"blog/ADS/#quiz","title":"Quiz","text":"<p>\u6bcf\u4e00\u6b21\u8bfe\u7684\u524d10\u5206\u949f\uff0810\uff1a00~10\uff1a10\uff09\u6709Quiz\uff0c\u5927\u591a\u6570\u662f\u89c6\u9891\u4e2d\u7684\u539f\u9898</p>"},{"location":"blog/ADS/#discussion","title":"Discussion","text":""},{"location":"blog/ADS/#research-topics","title":"Research topics","text":""},{"location":"blog/ADS/#_4","title":"\u9996\u9875","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/","title":"AVL Trees","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#why-we-need-avl-trees","title":"Why we need AVL Trees?","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#target-of-avl-trees","title":"Target of AVL Trees","text":"<p>The target of AVL Trees is to speed up searching, especially to handle dynamic searching.</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#what-is-dynamic-searching","title":"What is dynamic searching?","text":"<p>Dynamic searching is a searching with insertion and deletion.</p> <p>The data set is not fixed. It's dynamic.</p> <p>Ex: Binary search tree.</p> <p>In some case, we would get a skew tree which skew to one side.(\u4e5f\u5c31\u662f\u4e00\u68f5\u5411\u4e00\u8fb9\u504f\u7684\u6811) </p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#average-search-time","title":"Average search time","text":"<p>\u6bcf\u4e2a\u8282\u70b9\u7684\u9ad8\u5ea6\uff08\u6700\u4e0a\u65b9\u4e3a0\uff09+1\u4e4b\u548c/\u8282\u70b9\u6570</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#the-function-of-avl-tree","title":"The function of AVL tree","text":"<p>The function of AVL tree is to keep the tree dynamically balanced.</p> <p>If the tree is not balanced, then we let them become balanced.</p> <p>\u6dfb\u52a0\u5f88\u7b80\u5355\uff0c\u5220\u9664\u5f88\u96be</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#the-definition-of-avl-tree","title":"The definition of AVL tree","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#bf-balance-factor","title":"BF (Balance factor)","text":"<p>Single rotations\u00b6 <p></p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#trouble-finder","title":"Trouble finder","text":"<p>The trouble finder is the first node that signals the trouble.</p> <p>Ex</p> <p></p> <p>In this example, trouble finder is Mar.</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#double-rotation","title":"Double rotation","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#other-ways-to-implement-avl-trees","title":"Other ways to implement AVL trees","text":"<ul> <li>For example, we can use height to replace BF to construct an AVL tree.</li> </ul>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#the-height-of-the-avl-tree","title":"The height of the AVL tree","text":"<p>We know that \\(T_p=O(h)\\), where h is the height og the tree.</p> <p>But \\(h=?\\)</p> <p>\u63a8\u5bfc\u8bc1\u660e\\(h=O(\\ln n)\\)</p> <p></p> <p>so we can gain function like this:</p> <p></p> <p>\u8bc1\u660e\u6210\u529f</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#problem-set","title":"Problem Set","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#1","title":"1","text":"<p>Result shown as below.</p> <p></p> <p>So the answer is B.</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/AVL%20Trees/#2","title":"2","text":"<p>From the formula: $$ n_h=n_{h-1}+n_{h-2}+1 $$ \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4f9d\u6b21\u5217\u51fa\u7b54\u6848</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Amortized%20Analysis/","title":"Amortized Analysis","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/Amortized%20Analysis/#target","title":"Target","text":"<p>Any M consecutive tree operations starting from an empty tree take at most \\(O(M \\log N)\\) time.</p> <p>We have this: $$ worst\\; case\\; bound \\geq amortized\\; bound \\geq average \\; case\\; bound $$</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Amortized%20Analysis/#aggregate-analysis","title":"Aggregate Analysis(\u603b\u91cf\u5206\u6790)","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/Amortized%20Analysis/#idea","title":"Idea","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/Amortized%20Analysis/#accounting-method","title":"Accounting method(\u4f1a\u8ba1\u6cd5)","text":"<p>Notice that\uff1a</p> <p></p> <p>Ex: Stack with  MultiPop</p> <p></p> <p>BUT: The most difficult part of amortized method is to guess the amortized cost</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Amortized%20Analysis/#potential-method","title":"Potential method(\u52bf\u80fd\u6cd5)","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/Amortized%20Analysis/#idea_1","title":"Idea","text":"<ul> <li>\u6240\u4ee5\u7a76\u7adf\u4ec0\u4e48\u662f\u4fe1\u7528\uff1f\u4fe1\u7528\u662f\u8fd9\u4e2a\u64cd\u4f5c\u628a\u95ee\u9898\u7ed3\u6784\u6539\u53d8\u4e86\u591a\u5c11</li> </ul> <ul> <li>we have to guess a good potantial function for the current problem structure</li> <li>So a good potential function requires that the first element  \\(\\phi(D_0)\\)</li> </ul> <p>Ex: Stack with MultiPop(int k, Stack S)</p> <p></p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Amortized%20Analysis/#ex-splay-trees","title":"Ex: Splay Trees","text":"<p> $$ \\hat{c_i} \\leq 1+3(R_2(X)-R_1(X)) $$</p> <ul> <li>\u6240\u4ee5\u603b\u548c\u6700\u5927\u5c31\u662f\\(1+3(R_N(X)-R_1(X))\\)\uff0c\u4e5f\u5c31\u662f\\(O(\\log N)\\)</li> </ul>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Amortized%20Analysis/#problem","title":"Problem","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/Amortized%20Analysis/#1","title":"1","text":"<p>When doing amortized analysis, which one of the following statements is FALSE?</p> <p></p> <p>B</p> <p>The \"maximum\" is wrong, it should be \"minimum\".</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Amortized%20Analysis/#2","title":"2","text":"<p>A. The number of items currently in the buffer</p> <p>B. The opposite number of items currently in the buffer</p> <p>C. The number of available blocks currently in the buffer</p> <p>D. The opposite number of available blocks in the buffer</p> <p>D</p> <p></p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/","title":"Splay Trees","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/#target","title":"Target","text":"<p>Any M consecutive tree operations starting from an empty tree take at most \\(O(M \\log N)\\) time.</p> <p>So AVL tree is a kind of splay tree.</p> <p>It just means that the amortized(\u644a\u8fd8) time is \\(O(\\log N)\\).</p> <p>Note: access: \u8bbf\u95ee\u3001\u63a5\u89e6</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/#idea","title":"Idea","text":"<p>After a node is accessed, it is pushed to the root by a series of AVL tree rotations.</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/#insertion","title":"Insertion","text":"<p>For any nonroot node X, denote its parent by P and grandparent by G:</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/#p-is-the-root","title":"P is the root","text":"<p>Rotate X and P</p> <p></p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/#p-is-not-the-root","title":"P is not the root","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/#zig-zag","title":"Zig-zag","text":"<p>Double rotation</p> <p></p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/#zig-zig","title":"Zig-zig","text":"<p>Single rotation</p> <p></p> <p>Splaying roughly halves the depth of most nodes on the path.</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/#deletion","title":"Deletion","text":"<ol> <li>Find X</li> </ol> <p>X will be at the root.</p> <ol> <li>Remove X</li> </ol> <p>There will be two subtrees \\(T_L\\) and \\(T_R\\).</p> <ol> <li> <p>FindMax(\\(T_L\\))</p> </li> <li> <p>Make \\(T_R\\) the right child of the root of \\(T_L\\)</p> </li> </ol>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/#problem","title":"Problem","text":""},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/#1","title":"1","text":"<p>D</p> <p></p> <p>\u67e5\u8be2\u5b8c\u540e\u7ed3\u679c\u5982\u4e0a\u56fe\u6240\u793a</p>"},{"location":"blog/ADS/AVL%20Splay%20Amortize/Splay%20Trees/#2","title":"2","text":"<p>A</p> <p>\u67e5\u8be2\u5b8c\u540e\uff0c\u8fd9\u4e2a\u6700\u5927\u7684\u8282\u70b9\u5c31\u4f1a\u88ab\u5f53\u4f5c\u662f\u6839\u3002\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5b9a\u4e49\u53ef\u77e5\uff0c\u8fd9\u4e2a\u6811\u6ca1\u6709\u53f3\u5b50\u6811</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Measures%20for%20a%20search%20engine/","title":"Measures for a search engine","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Measures%20for%20a%20search%20engine/#search-engines","title":"Search engines","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Measures%20for%20a%20search%20engine/#measure-the-relevancy","title":"Measure the relevancy","text":"<ul> <li>Percision\u4fa7\u91cd\u4e8e\u51c6\u786e\u5ea6\uff0cRecall\u4fa7\u91cd\u4e8e\u8fd4\u56de\u5ea6</li> </ul>"},{"location":"blog/ADS/Inverted%20File%20Index/Measures%20for%20a%20search%20engine/#solution","title":"Solution","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Measures%20for%20a%20search%20engine/#problem","title":"Problem","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Measures%20for%20a%20search%20engine/#1","title":"1","text":"<p>C</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Measures%20for%20a%20search%20engine/#2","title":"2","text":"<p>B</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Modules/","title":"Modules","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Modules/#word-stemming","title":"Word stemming","text":"<ul> <li>\u5c31\u662f\u4f7f\u7528\u5355\u8bcd\u7684\u539f\u578b</li> </ul>"},{"location":"blog/ADS/Inverted%20File%20Index/Modules/#stop-words","title":"Stop words","text":"<ul> <li>\u53bb\u6389\u201ca\u201d\u201cthe\u201c\u8fd9\u79cd\u5f88\u7b80\u5355\u7684\u8bcd</li> </ul>"},{"location":"blog/ADS/Inverted%20File%20Index/Modules/#_1","title":"\u67e5\u8be2\u4e00\u4e2a\u8bcd\u7684\u65f6\u5019","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Modules/#search-trees","title":"Search trees","text":"<ul> <li>B- trees, B+ trees, Tries, ...</li> </ul>"},{"location":"blog/ADS/Inverted%20File%20Index/Modules/#hashing","title":"Hashing","text":"<p>Q: What are the pros and cons of using hashing, comparing to using search trees?</p> <ul> <li>faster for one word</li> <li>scanning in sequetial order is not possible(e.g. range searches are expansive)</li> <li>\u6bd4\u5982\uff0c\u5982\u679c\u6211\u4eec\u8f93\u5165\u4e86\u4e00\u4e2a\u9519\u8bef\u7684\u8bcd\u8bed\uff0c\u6309\u7406\u8bba\u6765\u8bb2\u6211\u4eec\u5e94\u8be5\u662f\u5f97\u4e0d\u5230\u67e5\u8be2\u7ed3\u679c\u7684\uff1b\u4f46\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5374\u53ef\u4ee5\u5f97\u5230\u76f8\u5e94\u7684\u8fd4\u56de\u503c</li> </ul>"},{"location":"blog/ADS/Inverted%20File%20Index/Modules/#memory-management","title":"Memory Management","text":"<p>\u5f53\u6211\u4eec\u6ca1\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u529e\u5462\uff1f</p> <p></p> <ul> <li>\u5982\u540d\u5b57\u6240\u793a\uff0cBlockIndex\u5c31\u662f\u4e00\u5757\u7684Index</li> <li>\u5173\u952e\u5728\u4e8e\u6211\u4eec\u9700\u8981\u5728\u4e00\u5757\u6ee1\u4e4b\u540e\uff0c\u5c06\u5176\u5199\u5165\u786c\u76d8\u4e2d\uff0c\u91ca\u653e\u5185\u5b58\uff0c\u5e76\u8fdb\u5165\u4e0b\u4e00\u4e2a\u533a\u5757\u4e2d\u3002\u6700\u540e\u518d\u8fdb\u884c\u4e00\u4e2a\u5408\u5e76</li> <li>\u5728\u6700\u540e\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u6240\u6709\u7684block Index\u662f\u6709\u5e8f\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u6211\u4eec\u64cd\u4f5c\u5f97\u66f4\u5feb</li> </ul>"},{"location":"blog/ADS/Inverted%20File%20Index/Modules/#problem","title":"Problem","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Modules/#1","title":"1","text":"<p>A.</p> <p>\u6839\u636eB+ tree\u7684\u6027\u8d28\u53ef\u4ee5\u77e5\u9053\uff0c\u8303\u56f4\u641c\u7d22\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\u3002\u4e0a\u8ff0\u53e5\u5b50\u6240\u8bf4\u7684\u5e94\u8be5\u662fHashing</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Modules/#2","title":"2","text":"<p>A</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Modules/#3","title":"3","text":"<p>B</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/","title":"Simple solutions","text":"<p>The real key technique used by search engines</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#the-tool-needed","title":"The tool needed","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#spider","title":"Spider","text":"<p>It's a tool to help you fetch web pages from the Internet.</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#how-can-we-get-the-page-which-contain-computer-science","title":"How can we get the page which contain \"Computer Science\"","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#scan-each-page-for-the-string-computer-science","title":"Scan each page for the string \"Computer Science\"","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#term-document-incidence-matrix","title":"Term-Document Incidence Matrix","text":"<p>How can we get the passage which contains both \"silver\" and \"truck\"?</p> <p></p> <ul> <li>\u4f46\u662f\uff0c\u8fd9\u6837\u7684\u65b9\u5f0f\u4f1a\u9020\u6210\u8868\u683c\u4e2d\u6709\u5f88\u591a\u4e2a0\uff0c\u8fdb\u4e00\u6b65\u5bfc\u81f4\u7a7a\u95f4\u3001\u65f6\u95f4\u7684\u6d6a\u8d39</li> </ul>"},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#compact-version-inverted-index","title":"Compact Version - Inverted Index","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#what-is-index","title":"What is index?","text":"<p>Index is a mechanism for locating given term in a text.</p> <p>\u7b80\u5355\u6765\u8bf4\uff0cindex\u5c31\u662f\u6307\u9488\uff0c\u7528\u6765\u6307\u793a\u4e00\u4e2a\u503c\u7684\u4f4d\u7f6e</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#what-is-inverted-file","title":"What is Inverted file","text":"<p>Inverted file contains a list of pointers to all occurrences of that term in the text.</p> <p></p>"},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#term-dictionary","title":"Term Dictionary","text":"<p>\u7b2c\u4e8c\u5217\u662fTerm Dictionary\uff0c\u7b2c\u4e8c\u5217\u662fPosting list</p> <p> <p>x\u610f\u5473\u7740\u603b\u9891\u7387\uff0c\u5c31\u662f\u8fd9\u4e2a\u6570\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u4e86\u51e0\u6b21</p> <p>an1;an2\u610f\u5473\u7740\u5728\u7b2can1\u4e2a\u6587\u6863\u4e2d\u51fa\u73b0\uff0c\u51fa\u73b0\u7684\u6b21\u6570\u662fan2\u6b21</p> <ul> <li>\u5f53\u67e5\u627e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u9891\u7387\u5c0f\u7684\u5173\u952e\u8bcd\u5f00\u59cb\u67e5\u8be2\uff0c\u51cf\u5c11\u603b\u5171\u7684\u67e5\u8be2\u6b21\u6570</li> </ul>"},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#index-generator","title":"Index generator","text":"<p>Inverted file index\u4e5f\u88ab\u79f0\u4e3aindex generator</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#_1","title":"\u4f2a\u4ee3\u7801","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#problem","title":"Problem","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Simple%20solutions/#1","title":"1","text":"<p>D</p> <p>\u6700\u540e\u4e0d\u9700\u8981\u8ba1\u7b97\u7cbe\u5ea6</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Topics/","title":"Topics","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#distributing-indexing","title":"Distributing indexing","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#term-partitioned-index","title":"Term-partitioned index","text":"<p>We can make a partition(\u5206\u533a) of the term dictionary and store differnt subsets of terms on different machines.</p> <p></p>"},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#document-partitioned-index","title":"Document-partitioned index","text":"<p>\u601d\u60f3\u5982\u4e0a\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f46\u662f\u5206\u533a\u7684\u4f9d\u636e\u662f\u6587\u4ef6</p> <p></p>"},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#dynamic-indexing","title":"Dynamic indexing","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#docs-come-in-over-time","title":"Docs come in over time","text":"<ul> <li>posting uodatas for terms already in dictionary</li> <li>new terms added to dictionary</li> </ul> <p>\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\uff1aauxiliary(\u8f85\u52a9\u6027\u7684\uff0c\u9644\u52a0\u7684) index</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#auxiliary-index","title":"Auxiliary index","text":"<p>\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u6211\u4eec\u7684\u4e3b\u8981\u6570\u636e\u5e93\u592a\u5927\u4e86\uff0c\u63d2\u5165\u64cd\u4f5c\u76f8\u5f53\u8d39\u65f6\u95f4</p> <p>\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5148\u521b\u5efa\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u7684auxiliary index\uff0c\u5728\u63d2\u5165\u7684\u65f6\u5019\u5148\u5c06\u6587\u4ef6\u63d2\u5165\u5176\u4e2d\uff0c\u7136\u540e\u5728\u5408\u9002\u7684\u65f6\u5019\u8fdb\u884c\u4e00\u4e2a\u5408\u5e76\u7684\u64cd\u4f5c</p> <p>\u5728\u7528\u6237\u67e5\u627e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u8be2\u4e24\u4e2aindex\uff0c\u7136\u540e\u518d\u8fd4\u56de\u7ed3\u679c</p> <p>\u4f46\u662f\u8fd9\u6837\u4e5f\u4f1a\u5f15\u51fa\u4e24\u4e2a\u95ee\u9898\uff1a</p> <ul> <li>\u4f55\u65f6\u8fdb\u884c\u5220\u9664</li> <li>\u600e\u4e48\u8fdb\u884c\u5220\u9664</li> </ul>"},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#compression","title":"Compression","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#store-terms","title":"Store terms","text":"<p>\u5982\u679c\u7528\u5e38\u89c4\u7684\u65b9\u6cd5\u53bb\u50a8\u5b58\u5355\u8bcd\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u7a7a\u95f4\u7684\u5229\u7528\u7387\u662f\u5f88\u4f4e\u7684\uff0c\u56e0\u4e3a\u6709\u4e9b\u5355\u8bcd\u662f\u76f8\u5f53\u957f\u7684\uff08100+\uff09\uff0c\u8fd9\u5c31\u8feb\u4f7f\u6211\u4eec\u5c06\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5b9a\u4e49\u4e3a\u8fd9\u4e48\u5927</p> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u7684\u5355\u8bcd\u4e32\u5728\u4e00\u8d77\u8fdb\u884c\u5b58\u50a8\uff0c\u7136\u540e\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u50a8\u5b58\u5355\u8bcd\u9996\u5b57\u6bcd\u7684\u4f4d\u7f6e</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#posting-list-store","title":"Posting List store","text":"<p>\u5728\u4e4b\u524d\u7684\u5b58\u50a8\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u76f4\u63a5\u5b58\u50a8\u6587\u7ae0\u7684\u5e8f\u53f7\u7684\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u5e8f\u53f7\u5f88\u5feb\u5c31\u4f1a\u8d85\u51fa\u6570\u636e\u7684\u5927\u5c0f\u4e0a\u9650\uff08\u6bd4\u5982\uff0c\u8d85\u51falong long\uff09</p> <p>\u6709\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u662f\u6211\u4eec\u53ef\u4ee5\u50a8\u5b58\u540e\u4e00\u7bc7\u6587\u7ae0\u4e0e\u524d\u4e00\u7bc7\u6587\u7ae0\u7684\u5e8f\u53f7\u4e4b\u5dee\uff0c\u8fd9\u6837\u7684\u8bdd\u53ef\u4ee5\u5f88\u5927\u7684\u51cf\u5c0f\u6570\u636e</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#thresholding","title":"Thresholding","text":"<p>We only concern the top x documents</p> <p></p>"},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#problem","title":"Problem","text":""},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#1","title":"1","text":"<p>A.</p>"},{"location":"blog/ADS/Inverted%20File%20Index/Topics/#2","title":"2","text":"<p>B</p> <p>\u8fd9\u662fdocument\u7684\uff0c\u4e0d\u662fquery\u7684</p>"},{"location":"blog/ADS/Leftist%20Heap/Definition/","title":"Leftist Heap: Definition","text":""},{"location":"blog/ADS/Leftist%20Heap/Definition/#target","title":"Target","text":"<p>\u6211\u4eec\u90fd\u77e5\u9053\uff0c\u6570\u636e\u7ed3\u6784\u4e2d\u5b66\u4e60\u8fc7\u7684Heap\u5df2\u7ecf\u8ba9\u6211\u4eec\u7684\u67e5\u627e\u3001\u5220\u9664\u3001\u63d2\u5165\u64cd\u4f5c\u53d8\u4e3a\u4e86\\(\\log(N)\\)\u7ea7\u522b\u7684\u3002\u800cLeftist Heaps\u8bde\u751f\u7684\u6700\u5927\u76ee\u7684\u662f\u4e3a\u4e86\u52a0\u5febmerging(\u5408\u5e76)\u8fd9\u4e00\u64cd\u4f5c(\\(O(N)\\))</p> <p>Qustion: How fast can we merge two heaps if we simplt use the orignal heap structure?</p> <p>\\(\\Theta(N)\\)</p> <p>\u6211\u4eec\u53ef\u4ee5\u5c06\u4e24\u4e2aheap\u5148\u653e\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u518d\u8c03\u7528Buildheap\uff0c\u8fd9\u4e00\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(N)\\)</p>"},{"location":"blog/ADS/Leftist%20Heap/Definition/#_1","title":"\u7279\u70b9","text":"<ul> <li>\u8fd8\u5177\u5907\u7740\u548cheap\u4e00\u6837\u7684\u6027\u8d28\uff08\u952e\u503c\u6700\u5c0f\u6216\u8005\u6700\u5927\uff09</li> <li>\u8fd8\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u4f46\u662f\u662funbalanced\uff0c\u800c\u4e14\u5411\u5de6\u504f</li> </ul>"},{"location":"blog/ADS/Leftist%20Heap/Definition/#properties","title":"Properties","text":""},{"location":"blog/ADS/Leftist%20Heap/Definition/#null-path-length-nplx","title":"null path length, Npl(X)","text":"<p> $$ Npl(X)=min{\\;Npl(C)+1\\;for\\;all\\;C\\;as\\;children\\;of\\;X\\; } $$</p>"},{"location":"blog/ADS/Leftist%20Heap/Definition/#definition-of-leftist-heaps","title":"Definition of Leftist Heaps","text":"<ul> <li>The tree is biased(\u504f\u5411\u7684) to get deep toward the left.</li> </ul> <p>Theorem:</p> <p></p>"},{"location":"blog/ADS/Leftist%20Heap/Definition/#problem","title":"Problem","text":""},{"location":"blog/ADS/Leftist%20Heap/Definition/#1","title":"1","text":"<p>A.</p> <p>\u4f7f\u7528\u9012\u5f52\u3002\u5047\u8bber\u7684\u65f6\u5019\u6210\u7acb\uff0c\u5f53\u662fr+1\u7684\u65f6\u5019\uff0c\u6211\u4eec\u77e5\u9053\u53f3\u5b50\u6811\u7684Npl\u5fc5\u5b9a\u662fr\uff0c\u56e0\u6b64\u53f3\u5b50\u6811\u81f3\u5c11\u6709\\(2^r-1\\)\u4e2a\u8282\u70b9\u3002\u6211\u4eec\u77e5\u9053\\(Npl_{left}\\geq Npl_{right}\\)\uff0c\u6240\u4ee5\u5de6\u8fb9\u4e5f\u81f3\u5c11\u6709\\(2^r-1\\)\u4e2a\u8282\u70b9\uff0c\u4e8e\u662f\u603b\u5171\u5c31\u6709\u8282\u70b9 $$ 2<sup>r-1+2</sup>r-1+1=2^{r+1}-1 $$</p>"},{"location":"blog/ADS/Leftist%20Heap/Operation/","title":"Leftist Heap: Operation","text":""},{"location":"blog/ADS/Leftist%20Heap/Operation/#declaration","title":"Declaration","text":""},{"location":"blog/ADS/Leftist%20Heap/Operation/#merge","title":"Merge","text":"<ul> <li>time compexity: \\(O(\\log(N))\\) </li> </ul>"},{"location":"blog/ADS/Leftist%20Heap/Operation/#deletemin","title":"DeleteMin","text":"<ul> <li>Delete the root</li> <li>Merge the two subtrees</li> </ul> <p>The time complexity is \\(O(\\log(N))\\)</p>"},{"location":"blog/ADS/Leftist%20Heap/Operation/#problem","title":"Problem","text":""},{"location":"blog/ADS/Leftist%20Heap/Operation/#1","title":"1","text":"<p>C.</p> <p>\u6839\u636e\u64cd\u4f5c\u4e00\u6b65\u6b65\u6765\u5c31\u597d\u4e86</p>"},{"location":"blog/ADS/Leftist%20Heap/Operation/#2","title":"2","text":"<p>D.</p> <p>\u4e0e\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u53ea\u9700\u8981\u8fdb\u884c\u64cd\u4f5c\u5c31\u597d\u4e86</p>"},{"location":"blog/ADS/Leftist%20Heap/Skew%20Heap/","title":"Skew Heaps","text":""},{"location":"blog/ADS/Leftist%20Heap/Skew%20Heap/#definition","title":"Definition","text":"<p>A simple version of the leftist heaps, don't care about the Npl.</p>"},{"location":"blog/ADS/Leftist%20Heap/Skew%20Heap/#target","title":"Target","text":""},{"location":"blog/ADS/Leftist%20Heap/Skew%20Heap/#the-merge-method","title":"The merge method","text":"<ul> <li>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cskew heap\u53f3\u8fb9\u8def\u5f84\u6700\u5927\u7684\u8282\u70b9\u4e0d\u9700\u8981\u4ea4\u6362\u5de6\u53f3\u5b69\u5b50</li> </ul> <p>Ex</p> <p></p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5bf9\u4e8e18\uff0c35\u7ec4\u6210\u7684\u5b50\u5806\u6765\u8bf4\uff0c\u56e0\u4e3a18\u662f\u5176\u53f3\u8fb9\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8282\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u4ea4\u6362\u5b83\u7684\u5de6\u53f3\u5b69\u5b50</p>"},{"location":"blog/ADS/Leftist%20Heap/Skew%20Heap/#problem","title":"Problem","text":""},{"location":"blog/ADS/Leftist%20Heap/Skew%20Heap/#1","title":"1","text":"<p>B</p> <p>\u5e94\u8be5\u662fleftist heap\u66f4\u5e73\u8861</p>"},{"location":"blog/ADS/Leftist%20Heap/Skew%20Heap/#2","title":"2","text":"<p>A</p> <p>\u56e0\u4e3askew tree\u7684\u4ea4\u6362\u65f6\u65f6\u90fd\u5728\u53d1\u751f\uff0c\u56e0\u6b64\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u53f3\u8def\u5f84\u7279\u522b\u957f\u7684\u60c5\u51b5</p>"},{"location":"blog/ADS/Leftist%20Heap/Skew%20Heap/#3","title":"3","text":"<p>C</p> <p>B\u662f\u5bf9\u7684\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u50a8\u5b58Npl\uff1bC\u644a\u8fd8\u65f6\u95f4\u662f\\(O(\\log N)\\)\uff0c\u6700\u5dee\u7684\u65f6\u95f4\u5927\u4e8e\\(\\log N\\)\uff1bD\u6b63\u786e</p>"},{"location":"blog/ADS/Leftist%20Heap/Skew%20Heap/#4","title":"4","text":"<p>A</p> <p>\u6b63\u786e\u7684</p>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/B%2B%20Trees/","title":"B+ Trees","text":""},{"location":"blog/ADS/Red-Black%20and%20B%2B/B%2B%20Trees/#definition","title":"Definition","text":"<p>A B+ tree of order M is a tree with the following structural properties: </p> <ul> <li>\u6211\u4eec\u4e0d\u80fd\u6709\u4e00\u4e2a\u6839\u52a0\u4e00\u4e2a\u5b69\u5b50\u7684\u7ed3\u6784</li> <li>\u8fd9\u68f5\u6811\u662f\u4ece\u4e0b\u5f80\u4e0a\u6784\u5efa\u7684\uff0c\u800c\u975e\u4ece\u4e0a\u5f80\u4e0b</li> </ul>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/B%2B%20Trees/#operation","title":"Operation","text":""},{"location":"blog/ADS/Red-Black%20and%20B%2B/B%2B%20Trees/#insertion","title":"Insertion","text":"<ul> <li>Simple spliting method</li> <li>find a not full sibling(\\(\\times\\))</li> </ul> <ul> <li>\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u53f6\u5b50\u8282\u70b9\u5143\u7d20\u4e2a\u6570\u6700\u591a\u6709M\u4e2a</li> </ul>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/B%2B%20Trees/#deletion","title":"Deletion","text":"<p>\u4e0e\u63d2\u5165\u76f8\u4f3c\uff0c\u4f46\u5728\u4e00\u4e2a\u8282\u70b9\u5931\u53bb\u4e24\u4e2a\u5b69\u5b50\u540e\uff0c\u9700\u8981\u5220\u6389\u5b83</p>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/B%2B%20Trees/#analysis","title":"Analysis","text":"<p>\u56e0\u4e3a\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u6709M/2\u4e2a\u8282\u70b9</p> <p></p>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/B%2B%20Trees/#problem","title":"Problem","text":""},{"location":"blog/ADS/Red-Black%20and%20B%2B/B%2B%20Trees/#1","title":"1","text":"<p>D</p> <p>Don't know.</p>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/B%2B%20Trees/#2","title":"2","text":"<p>A</p> <p>\u5f88\u7b80\u5355\uff0c\u5b9a\u4e49</p>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Definition/","title":"Red-Black Trees Definition","text":""},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Definition/#the-definition-of-a-red-black-trees","title":"The definition of a Red-Black Trees","text":"<ul> <li>In the red-black tree, we consider every NULL pointer, every NIL, as a leaf node, and thier colr is black.</li> <li>real tree node -&gt; \"internal node\"</li> <li>NIL node -&gt; External node(leaf node)</li> </ul> <p>Ex</p> <p></p> <p>A</p>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Definition/#the-black-height-of-red-black-treesbh","title":"The black-height of Red-Black Trees(bh)","text":""},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Definition/#definition","title":"Definition","text":"<ul> <li>Notice that x is not included.</li> </ul>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Definition/#lemma","title":"Lemma","text":"<p>A red-black tree with \\(N\\) internal nodes has height at most \\(2\\ln (N+1)\\)</p>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Definition/#proof","title":"Proof","text":"<ul> <li>sizeof(x): the Number of internal nodes in the subtree rooted at x</li> <li>\u6839\u636e\u7ea2\u9ed1\u6811\u5b9a\u4e49\u7684\u7b2c\u56db\u6761\uff0c\u6211\u4eec\u77e5\u9053\u6811\u4e2d\u7684\u67d0\u4e00\u8def\u5f84\u7684\u9ed1\u8272\u8282\u70b9\u6570\u80af\u5b9a\u6bd4\u7ea2\u8272\u8282\u70b9\u6570\u591a</li> </ul>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Definition/#problem","title":"Problem","text":""},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Definition/#1","title":"1","text":"<p>A</p> <p>\u6784\u9020\u6700\u77ed\u8def\u7ecf\uff0c\u8def\u5f84\u4e0a\u53ea\u6709\u9ed1\u8282\u70b9\uff1b\u6784\u9020\u6700\u957f\u8def\u5f84\uff0c\u8def\u5f84\u4e0a\u662f\u4e00\u7ea2\u4e00\u9ed1</p>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Definition/#2","title":"2","text":"<p>A</p> <p>\u6839\u636e\u5b9a\u4e49\u5373\u53ef</p>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Operation/","title":"Red-Black Trees Operation","text":"<p>\u7ea2\u9ed1\u6811- \u63d2\u5165\u3001\u5220\u9664 \u6d41\u7a0b\u8be6\u89e3\uff0c\u672b\u5c3e\u9644\u5b8c\u6574\u4ee3\u7801\uff0c\u53ca\u9ad8\u6e05\u8fc7\u7a0b\u56fe_\u6dfb\u52a0\u7684\u8fc7\u7a0b\u8bb2\u89e3\u5b8c\u6bd5\u3002\u6539\u5929\u5728\u8ddf\u5927\u5bb6\u8bb2\u5220\u9664-CSDN\u535a\u5ba2</p>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Operation/#insertion","title":"Insertion","text":""},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Operation/#deletion","title":"Deletion","text":""},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Operation/#number-of-rotations","title":"Number of rotations","text":"<ul> <li>When using insertion, AVL trees are recommended.</li> </ul>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Operation/#problem","title":"Problem","text":""},{"location":"blog/ADS/Red-Black%20and%20B%2B/Red-Black%20Trees%20Operation/#1","title":"1","text":"<p>In the worst case the DELETE operation in a RED-BLACK tree of n nodes requires \u03a9(logn) rotations.</p> <p>F.</p> <p>rotation\u6700\u591a3\u6b21\u5c31\u53ef\u4ee5\u4e86</p>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/wenti/","title":"Wenti","text":""},{"location":"blog/ADS/Red-Black%20and%20B%2B/wenti/#_1","title":"\u4e00","text":"<p>\u4e3a\u4ec0\u4e48red-black tree\u8981\u8fd9\u6837\u5b9a\u4e49</p> <p>bh(x)\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u5b9a\u4e49</p> <ul> <li>\u5982\u679c\u4e0d\u8fd9\u6837\u5b9a\u4e49\uff0c\u4e0d\u7b97\u7a7a\u6307\u9488\u7684\u8bdd\u4f1a\u600e\u4e48\u6837\uff08\u8fd8\u662f\u4e00\u68f5\u597d\u7684\u6811\u5417\uff09</li> </ul>"},{"location":"blog/ADS/Red-Black%20and%20B%2B/wenti/#_2","title":"\u4e8c","text":"<p>\u4e0d\u60f3\u8981NIL\uff0c\u4f46\u6211\u8fd8\u8981\u4e00\u68f5\u7ea2\u9ed1\u6811\uff0c\u600e\u4e48\u6539\u5199\u5b9a\u4e49</p> <p>nonpath\uff0cNIL\u8282\u70b9\u4fdd\u8bc1\u4e86\u6781\u7aef\u60c5\u51b5\u4e0d\u4f1a\u51fa\u73b0</p> <p>NIL \u8282\u70b9</p> <p>\u4f7f\u7528\u4e00\u4e2aNIL\uff0c\u5e2e\u52a9\u50a8\u5b58</p> <p>\u7ea2\u9ed1\u6811\u53ef\u4ee5\u4f7f\u7528\u5faa\u73af\u5b9e\u73b0\uff0c\u9012\u5f52\u5f88\u6162</p>"},{"location":"blog/CTF/","title":"\u9996\u9875","text":""},{"location":"blog/CTF/#information","title":"Information","text":""},{"location":"blog/CTF/#_1","title":"\u8d44\u6e90","text":""},{"location":"blog/CTF/#course-website","title":"Course website","text":"<p>CTF101-Labs-2024</p>"},{"location":"blog/CTF/#_2","title":"\u7ed9\u5206","text":"<p>\u628a\u57fa\u7840\u5b8c\u6210\u5c31\u53ef\u4ee5\u5f97\u5230\u6ee1\u5206</p>"},{"location":"blog/CTF/#_3","title":"\u57fa\u7840\u6a21\u5757","text":""},{"location":"blog/CTF/#lab05","title":"lab0+5\u4e2a\u5b9e\u9a8c","text":"<p>5%+10%*5=55%</p>"},{"location":"blog/CTF/#_4","title":"\u51fa\u52e4","text":"<p>5%</p>"},{"location":"blog/CTF/#2","title":"\u81ea\u9009\u4e13\u9898\uff08&gt;=2\uff09","text":"<p>\u6bcf\u6b21\u4f5c\u4e1a20%\uff0c \u81ea\u90092\u4e2a\u6216\u4ee5\u4e0a</p>"},{"location":"blog/CTF/#_5","title":"\u5bfc\u8bba","text":""},{"location":"blog/CTF/#_6","title":"\u738b\u9e64\u7fd4","text":""},{"location":"blog/CTF/#_7","title":"\u4e3b\u9875","text":""},{"location":"blog/CTF/#_8","title":"\u7b14\u8bb0","text":"<p>Computer Science - \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c (tonycrane.cc)</p>"},{"location":"blog/CTF/#ctf","title":"CTF\u7c7b\u578b\u4ee5\u53ca\u65b9\u5411","text":""},{"location":"blog/CTF/#_9","title":"\u4f5c\u7528","text":"<ol> <li>\u4fdd\u7814\u52a0\u5206\uff08\u56fd\u8d5b\u521b\u65b0\u5b9e\u8df5\u8d5b\uff09</li> <li>\u7b80\u5386</li> <li>\u540e\u7eed\u8bfe\u7a0b\u57fa\u7840</li> </ol>"},{"location":"blog/CTF/#_10","title":"\u5982\u4f55\u5b66\u4e60","text":""},{"location":"blog/CTF/#_11","title":"\u7406\u8bba\u77e5\u8bc6","text":""},{"location":"blog/CTF/#_12","title":"\u7f51\u7ad9","text":"<p>CTF Wiki</p>"},{"location":"blog/CTF/#_13","title":"\u4e66\u7c4d","text":"<p>\u300a\u4ece0\u52301\uff1aCTFer\u6210\u957f\u4e4b\u8def\u300b</p>"},{"location":"blog/CTF/#_14","title":"\u505a\u9898\u3001\u6253\u6bd4\u8d5b","text":"<p>\u6821\u5185\u8bad\u7ec3\u9898\u76ee\u5e73\u53f0 ZJUCTF\u6821\u8d5b</p>"},{"location":"blog/CTF/#_15","title":"\u6709\u5173\u8bfe\u7a0b\u7684\u4e00\u4e9b\u4fe1\u606f","text":""},{"location":"blog/CTF/#_16","title":"\u4e0a\u8bfe\u60c5\u51b5","text":"<p>\u7b2c\u4e00\u5468\u7684\u665a\u8bfe\u662f\u7559\u7ed9\u4f5c\u4e1a\u7684\uff08\u53ef\u4ee5\u4e0d\u7528\u6765\uff09 \u7b2c\u4e8c\u5468\u7684\u665a\u8bfe\u4f1a\u4e0a\u8bfe</p>"},{"location":"blog/CTF/#_17","title":"\u8003\u52e4","text":"<ol> <li>\u5141\u8bb8\u7ebf\u4e0a\u4e0a\u8bfe\uff0c\u4f46\u9700\u8981\u63d0\u524d\u8bf4\u660e\uff0c\u4e0d\u5f71\u54cd\u6210\u7ee9</li> <li>\u6ca1\u6709\u63d0\u524d\u8bf4\u660e/\u8bf7\u5047\uff0c\u7f3a\u52e4\u4f1a\u6263\u9664\u4e00\u5b9a\u7684\u5206\u6570</li> </ol>"},{"location":"blog/CTF/#_18","title":"\u7b14\u8bb0","text":"<p>\u5177\u4f53\u8bf7\u770b\u7535\u8111\u4e0a\u6587\u4ef6</p>"},{"location":"blog/verilog/","title":"Verilog \u5b66\u4e60","text":"<p>\u5728\u8fd9\u4e00\u5b66\u4e60\u4e2d\uff0c\u4e3b\u8981\u53c2\u8003\u7684\u7f51\u7ad9\u662fHDLBits (01xz.net)\uff0c\u4e00\u4e2a\u4e13\u95e8\u5b66\u4e60Verilog\u7684\u7f51\u7ad9\uff0c\u5e0c\u671b\u5728\u8fd9\u6b21\u7684\u5b66\u4e60\u540e\u6211\u53ef\u4ee5\u5728\u63a5\u4e0b\u6765\u7684\u8ba1\u7b97\u673a\u7ec4\u6210\u4e2d\u53d6\u5f97\u6bd4\u8f83\u597d\u7684\u6210\u7ee9\u3002</p>"},{"location":"blog/verilog/verilog%20language/Basic/1-Simple%20wire/","title":"Simple wire","text":""},{"location":"blog/verilog/verilog%20language/Basic/1-Simple%20wire/#wire","title":"\u4ec0\u4e48\u662f wire ?","text":"<p>Unlike physical wires, wires (and other signals) in Verilog are directional. This means information flows in only one direction, from (usually one) source to the sinks (The source is also often called a driver that drives a value onto a wire). In a Verilog \"continuous assignment\" (<code>assign left_side = right_side;</code>), the value of the signal on the right side is driven onto the wire on the left side. The assignment is \"continuous\" because the assignment continues all the time even if the right side's value changes. A continuous assignment is not a one-time event.</p> <ul> <li>wire \u5177\u6709\u65b9\u5411\u6027\uff0c\u503c\u4ece\u53f3\u5230\u5de6</li> <li>continuous assignment \u6307\u7684\u662f\u50cf assign left_side = right_side; \u7684\u8d4b\u503c</li> <li>continuous assignment \u6bcf\u65f6\u6bcf\u523b\u90fd\u5728\u4f5c\u7528\uff0c\u5de6\u8fb9\u7684\u503c\u968f\u7740\u53f3\u8fb9\u7684\u503c\u6539\u53d8</li> </ul> <p>In addition to continuous assignments, Verilog has three other assignment types that are used in procedural blocks, two of which are synthesizable. We won't be using them until we start using procedural blocks.</p>"},{"location":"blog/verilog/verilog%20language/Basic/1-Simple%20wire/#problem-statement","title":"Problem statement","text":"<p>Your task is to create a wire (in green) by adding an <code>assign</code> statement to connect <code>in</code> to <code>out</code>. </p> Verilog<pre><code>module top_module( input in, output out );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Basic/1-Simple%20wire/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( input in, output out );\n    assign out=in;\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Basic/2-Wire4/","title":"Wire4","text":""},{"location":"blog/verilog/verilog%20language/Basic/2-Wire4/#something-need-to-be-noticed","title":"Something need to be noticed","text":"<ul> <li>When you have multiple <code>assign</code> statements, the order in which they appear in the code does not matter.</li> </ul> <p>Unlike a programming language, <code>assign</code> statements (\"continuous assignments\") describe connections between things, not the action of copying a value from one thing to another.</p>"},{"location":"blog/verilog/verilog%20language/Basic/2-Wire4/#problem-statement","title":"Problem statement","text":"<p>Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections:</p> <p>a -&gt; w</p> <p>b -&gt; x</p> <p>b -&gt; y</p> <p>c -&gt; z</p> Verilog<pre><code>module top_module( \n    input a,b,c,\n    output w,x,y,z );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Basic/2-Wire4/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( \n    input a,b,c,\n    output w,x,y,z );\n    assign {w,x,y,z} = {a,b,b,c};\nendmodule\n</code></pre> <ul> <li>If we're certain about the width of each signal, using the concatenation operator is equivalent and shorter: assign {w,x,y,z} = {a,b,b,c};</li> </ul>"},{"location":"blog/verilog/verilog%20language/Basic/3-Not%20gate/","title":"Not gate","text":""},{"location":"blog/verilog/verilog%20language/Basic/3-Not%20gate/#problem-statement","title":"Problem statement","text":"Verilog<pre><code>module top_module( input in, output out );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Basic/3-Not%20gate/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( input in, output out );\n    assign out=~in;\nendmodule\n</code></pre> <ul> <li>\"~\"\u610f\u5473\u7740\u6309\u7167\u4f4d\u6765\u53d6\u53cd</li> <li>\"!\"\u610f\u5473\u7740\u903b\u8f91\u53d6\u53cd</li> </ul>"},{"location":"blog/verilog/verilog%20language/Basic/4-And%20gate/","title":"And gate","text":""},{"location":"blog/verilog/verilog%20language/Basic/4-And%20gate/#problem-statement","title":"Problem statement","text":"<p>This circuit now has three wires (<code>a</code>, <code>b</code>, and <code>out</code>). Wires <code>a</code> and <code>b</code> already have values driven onto them by the input ports. But wire <code>out</code> currently is not driven by anything. Write an <code>assign</code> statement that drives <code>out</code> with the AND of signals <code>a</code> and <code>b</code>.</p> Verilog<pre><code>module top_module( \n    input a, \n    input b, \n    output out );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Basic/4-And%20gate/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( \n    input a, \n    input b, \n    output out );\n    assign out=a&amp;b;\nendmodule\n</code></pre> <ul> <li>\"&amp;\"\u662f\u6309\u4f4d\u4e0e</li> <li>\"&amp;&amp;\"\u662f\u903b\u8f91\u4e0e</li> </ul>"},{"location":"blog/verilog/verilog%20language/Basic/5-Nor%20gate/","title":"Nor gate","text":""},{"location":"blog/verilog/verilog%20language/Basic/5-Nor%20gate/#what-is-nor-gate","title":"What is nor gate?","text":"<p>A NOR gate is an OR gate with its output inverted. A NOR function needs two operators when written in Verilog.</p>"},{"location":"blog/verilog/verilog%20language/Basic/5-Nor%20gate/#problem-statement","title":"Problem statement","text":"Verilog<pre><code>module top_module( \n    input a, \n    input b, \n    output out );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Basic/5-Nor%20gate/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( \n    input a, \n    input b, \n    output out );\n    assign out=~(a|b);\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Basic/6-Xnor%20gate/","title":"Xnor gate(\u540c\u6216)","text":""},{"location":"blog/verilog/verilog%20language/Basic/6-Xnor%20gate/#xnor","title":"Xnor","text":"<p>\u610f\u4e3a\u540c\u6216\uff0c\u76f8\u540c\u8f93\u51fa1\uff0c\u4e0d\u540c\u8f93\u51fa0</p>"},{"location":"blog/verilog/verilog%20language/Basic/6-Xnor%20gate/#problem-station","title":"Problem station","text":"<p>Create a module that implements an XNOR gate.</p> Verilog<pre><code>module top_module( \n    input a, \n    input b, \n    output out );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Basic/6-Xnor%20gate/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( \n    input a, \n    input b, \n    output out );\n    assign out=~(a^b);  //assign out=a^b;\nendmodule\n</code></pre> <ul> <li>\u5176\u4e2d\uff0ca^b\u610f\u4e3a\u5f02\u6216</li> </ul>"},{"location":"blog/verilog/verilog%20language/Basic/7-Declaring%20wires/","title":"Declaring wires","text":""},{"location":"blog/verilog/verilog%20language/Basic/7-Declaring%20wires/#why-should-we-declare-wires","title":"Why should we declare wires?","text":"<p>The circuits so far have been simple enough that the outputs are simple functions of the inputs. As circuits become more complex, you will need wires to connect internal components together. When you need to use a wire, you should declare it in the body of the module, somewhere before it is first used. </p>"},{"location":"blog/verilog/verilog%20language/Basic/7-Declaring%20wires/#example","title":"Example","text":"Verilog<pre><code>module top_module (\n    input in,              // Declare an input wire named \"in\"\n    output out             // Declare an output wire named \"out\"\n);\n\n    wire not_in;           // Declare a wire named \"not_in\"\n\n    assign out = ~not_in;  // Assign a value to out (create a NOT gate).\n    assign not_in = ~in;   // Assign a value to not_in (create another NOT gate).\n\nendmodule   // End of module \"top_module\"\n</code></pre> <ul> <li>Note that it doesn't matter which of the NOT gates you create first: You still end up with the same circuit.</li> </ul>"},{"location":"blog/verilog/verilog%20language/Basic/7-Declaring%20wires/#problem-statement","title":"Problem statement","text":"<p>Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire <code>out</code>, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.</p> <p>If you're following the circuit structure in the diagram, you should end up with four assign statements, as there are four signals that need a value assigned.</p> <p></p> Verilog<pre><code>`default_nettype none\nmodule top_module(\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n   ); \n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Basic/7-Declaring%20wires/#solution","title":"Solution","text":"Verilog<pre><code>`default_nettype none\nmodule top_module(\n    input a,\n    input b,\n    input c,\n    input d,\n    output out,\n    output out_n   ); \n    wire wire1,wire2;\n    assign wire1=a&amp;b;\n    assign wire2=c&amp;d;\n    assign out=wire1|wire2;\n    assign out_n=~out;\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Basic/8-7458%20chip/","title":"7458 chip","text":""},{"location":"blog/verilog/verilog%20language/Basic/8-7458%20chip/#problem-statement","title":"Problem statement","text":"<p>Create a module with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an <code>assign</code> statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates. For extra practice, try it both ways.</p> <p></p> Verilog<pre><code>module top_module ( \n    input p1a, p1b, p1c, p1d, p1e, p1f,\n    output p1y,\n    input p2a, p2b, p2c, p2d,\n    output p2y );\n\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Basic/8-7458%20chip/#solution","title":"Solution","text":"Verilog<pre><code>module top_module ( \n    input p1a, p1b, p1c, p1d, p1e, p1f,\n    output p1y,\n    input p2a, p2b, p2c, p2d,\n    output p2y );\n    assign p1y=p1a&amp;p1b&amp;p1c|p1d&amp;p1e&amp;p1f;\n    assign p2y=p2a&amp;p2b|p2c&amp;p2d;\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/1-Modules/","title":"Modules","text":""},{"location":"blog/verilog/verilog%20language/Modules/1-Modules/#some-basic-information-of-modules","title":"Some basic information of modules","text":"<p>Modules contain instance of other modules, which forms a hierarchy.</p> <p>When connecting modules, only the ports on the module are important. You do not need to know the code inside the module.</p> <p>The code for module <code>mod_a</code> looks like this:</p> Verilog<pre><code>module mod_a ( input in1, input in2, output out );\n    // Module body\nendmodule\n</code></pre> <p>The hierarchy of modules is created by instantiating one module inside another, as long as all of the modules used belong to the same project (so the compiler knows where to find the module). The code for one module is not written inside another module's body (Code for different modules are not nested).</p> <p>You may connect signals to the module by port name or port position.</p>"},{"location":"blog/verilog/verilog%20language/Modules/1-Modules/#connecting-signals-to-module-ports","title":"Connecting Signals to Module Ports","text":"<p>There are two commonly-used methods to connect a wire to a port: by position or by name.</p>"},{"location":"blog/verilog/verilog%20language/Modules/1-Modules/#by-position","title":"By position","text":"<p>The syntax to connect wires to ports by position should be familiar, as it uses a C-like syntax. When instantiating a module, ports are connected left to right according to the module's declaration. For example:</p> Verilog<pre><code>mod_a instance1 ( wa, wb, wc );\n</code></pre> <p>This instantiates a module of type <code>mod_a</code> and gives it an instance name of \"instance1\", then connects signal <code>wa</code> (outside the new module) to the first port (<code>in1</code>) of the new module, <code>wb</code> to the second port (<code>in2</code>), and <code>wc</code> to the third port (<code>out</code>). One drawback of this syntax is that if the module's port list changes, all instantiations of the module will also need to be found and changed to match the new module.</p> <ul> <li>By position\u65f6\uff0c\u9700\u8981\u5173\u6ce8\u7aef\u53e3\u7684\u987a\u5e8f</li> </ul>"},{"location":"blog/verilog/verilog%20language/Modules/1-Modules/#by-name","title":"By name","text":"<p>Connecting signals to a module's ports by name allows wires to remain correctly connected even if the port list changes. This syntax is more verbose, however.</p> Verilog<pre><code>mod_a instance2 ( .out(wc), .in1(wa), .in2(wb) );\n</code></pre> <p>The above line instantiates a module of type <code>mod_a</code> named \"instance2\", then connects signal <code>wa</code> (outside the module) to the port named <code>in1</code>, <code>wb</code> to the port named <code>in2</code>, and <code>wc</code> to the port named <code>out</code>. Notice how the ordering of ports is irrelevant here because the connection will be made to the correct name, regardless of its position in the sub-module's port list. Also notice the period immediately(\u53e5\u70b9) preceding the port name in this syntax.</p>"},{"location":"blog/verilog/verilog%20language/Modules/1-Modules/#problem-statement","title":"Problem statement","text":"<p>Connect the signals.</p> <p></p> Verilog<pre><code>module top_module ( input a, input b, output out );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/1-Modules/#solution","title":"Solution","text":"Verilog<pre><code>module top_module ( input a, input b, output out );\n    mod_a inst (a,b,out);   // By position\n    // mod_a inst (.in1(a), .in2(b), .out(out));        By name\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/2-Connecting%20ports%20by%20position/","title":"Connecting ports by position","text":"<p>This problem is similar to the previous one (module). You are given a module named <code>mod_a</code> that has 2 outputs and 4 inputs, in that order. You must connect the 6 ports by position to your top-level module's ports <code>out1</code>, <code>out2</code>, <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code>, in that order.</p> <p>You are given the following module:</p> Verilog<pre><code>module mod_a ( output, output, input, input, input, input );\n</code></pre> <p></p> Verilog<pre><code>module top_module ( \n    input a, \n    input b, \n    input c,\n    input d,\n    output out1,\n    output out2\n);\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/2-Connecting%20ports%20by%20position/#solution","title":"Solution","text":"Verilog<pre><code>module top_module ( \n    input a, \n    input b, \n    input c,\n    input d,\n    output out1,\n    output out2\n);\n    mod_a inst (out1,out2,a,b,c,d);\nendmodule\n</code></pre> <ul> <li>\u6ce8\u610f\u7aef\u53e3\u987a\u5e8f</li> </ul>"},{"location":"blog/verilog/verilog%20language/Modules/3-Connecting%20ports%20by%20name/","title":"Connecting ports by name","text":""},{"location":"blog/verilog/verilog%20language/Modules/3-Connecting%20ports%20by%20name/#problem-statement","title":"Problem statement","text":"<p>This problem is similar to module. You are given a module named <code>mod_a</code> that has 2 outputs and 4 inputs, in some order. You must connect the 6 ports by name to your top-level module's ports:</p> Port in <code>mod_a</code> Port in <code>top_module</code> <code>output out1</code> <code>out1</code> <code>output out2</code> <code>out2</code> <code>input in1</code> <code>a</code> <code>input in2</code> <code>b</code> <code>input in3</code> <code>c</code> <code>input in4</code> <code>d</code> <p>You are given the following module:</p> Verilog<pre><code>module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);\n</code></pre> <p></p> Verilog<pre><code>module top_module ( \n    input a, \n    input b, \n    input c,\n    input d,\n    output out1,\n    output out2\n);\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/3-Connecting%20ports%20by%20name/#solution","title":"Solution","text":"Verilog<pre><code>module top_module ( \n    input a, \n    input b, \n    input c,\n    input d,\n    output out1,\n    output out2\n);\n    mod_a inst(\n        .out1(out1),\n        .out2(out2),\n        .in1(a),\n        .in2(b),\n        .in3(c),\n        .in4(d)\n    );\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/4-Three%20modules/","title":"Three modules","text":""},{"location":"blog/verilog/verilog%20language/Modules/4-Three%20modules/#problem-statement","title":"Problem statement","text":"<p>You are given a module <code>my_dff</code> with two inputs and one output (that implements a D flip-flop). Instantiate three of them, then chain them together to make a shift register of length 3. The <code>clk</code> port needs to be connected to all instances.</p> <p>The module provided to you is: <code>module my_dff ( input clk, input d, output q );</code></p> <p>Note that to make the internal connections, you will need to declare some wires. Be careful about naming your wires and module instances: the names must be unique.</p> <p></p> Verilog<pre><code>module top_module ( input clk, input d, output q );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/4-Three%20modules/#solution","title":"Solution","text":"Verilog<pre><code>module top_module ( input clk, input d, output q );\n    wire w1,w2;\n    my_dff inst1 (clk,d,w1);\n    my_dff inst2 (clk,w1,w2);\n    my_dff inst3 (clk,w2,q);\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/5-Modules%20and%20vectors/","title":"Modules and vectors","text":""},{"location":"blog/verilog/verilog%20language/Modules/5-Modules%20and%20vectors/#what-is-the-aim-of-this-part","title":"What is the aim of this part?","text":"<p>This exercise is an extension of module_shift. Instead of module ports being only single pins, we now have modules with vectors as ports, to which you will attach wire vectors instead of plain wires. Like everywhere else in Verilog, the vector length of the port does not have to match the wire connecting to it, but this will cause zero-padding or trucation of the vector. This exercise does not use connections with mismatched vector lengths.</p>"},{"location":"blog/verilog/verilog%20language/Modules/5-Modules%20and%20vectors/#problem-statement","title":"Problem statement","text":"<p>You are given a module <code>my_dff8</code> with two inputs and one output (that implements a set of 8 D flip-flops). Instantiate three of them, then chain them together to make a 8-bit wide shift register of length 3. In addition, create a 4-to-1 multiplexer (not provided) that chooses what to output depending on <code>sel[1:0]</code>: The value at the input d, after the first, after the second, or after the third D flip-flop. (Essentially, <code>sel</code> selects how many cycles to delay the input, from zero to three clock cycles.)</p> <p>The module provided to you is: <code>module my_dff8 ( input clk, input [7:0] d, output [7:0] q );</code></p> <p>The multiplexer is not provided. One possible way to write one is inside an <code>always</code> block with a <code>case</code> statement inside. (See also: mux9to1v)</p> Verilog<pre><code>module top_module ( \n    input clk, \n    input [7:0] d, \n    input [1:0] sel, \n    output [7:0] q \n);\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/5-Modules%20and%20vectors/#solution","title":"Solution","text":"Verilog<pre><code>module top_module ( \n    input clk, \n    input [7:0] d, \n    input [1:0] sel, \n    output [7:0] q \n);\n    wire  [7:0] w1, w2, w3;\n    my_dff8 inst1 (clk, d, w1);\n    my_dff8 inst2 (clk, w1, w2);\n    my_dff8 inst3 (clk, w2, w3);\n    always @* begin\n        case(sel)\n            0: q = d;\n            1: q = w1;\n            2: q = w2;\n            3: q = w3;\n        endcase\n    end\nendmodule\n</code></pre> <ul> <li>\u7b2c7\u884c\u4e2d\u7684\u5b9a\u4e49\u65b9\u5f0f\u662f\u5c06w1,w2,w3\u5168\u90e8\u5b9a\u4e49\u6210\u4e868\u4f4d</li> </ul> <p>\u82e5\u8981\u5728\u4e00\u884c\u4e2d\u5b9a\u4e49\u4e0d\u4e00\u6837\u4f4d\u6570\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f</p> Verilog<pre><code>wire  [7:0] w1; wire w2;\n</code></pre> <p>\u5176\u4e2d\uff0cw1\u662f8\u4f4d\u7684\uff0cw2\u662f1\u4f4d\u7684</p>"},{"location":"blog/verilog/verilog%20language/Modules/6-Adder%201/","title":"Adder 1","text":""},{"location":"blog/verilog/verilog%20language/Modules/6-Adder%201/#problem-statement","title":"Problem statement","text":"<p>You are given a module <code>add16</code> that performs a 16-bit addition. Instantiate two of them to create a 32-bit adder. One add16 module computes the lower 16 bits of the addition result, while the second add16 module computes the upper 16 bits of the result, after receiving the carry-out from the first adder. Your 32-bit adder does not need to handle carry-in (assume 0) or carry-out (ignored), but the internal modules need to in order to function correctly. (In other words, the <code>add16</code> module performs 16-bit a + b + cin, while your module performs 32-bit a + b).</p> <p>Connect the modules together as shown in the diagram below. The provided module <code>add16</code> has the following declaration:</p> Verilog<pre><code>module add16 ( input[15:0] a, input[15:0] b, input cin, output[15:0] sum, output cout );\n</code></pre> <p></p>"},{"location":"blog/verilog/verilog%20language/Modules/6-Adder%201/#solution","title":"Solution","text":"Verilog<pre><code>module top_module(\n    input [31:0] a,\n    input [31:0] b,\n    output [31:0] sum\n);\n    wire w1;\n    add16 inst1 (a[15:0],b[15:0],0,sum[15:0],w1);\n    add16 inst2 (a[31:16],b[31:16],w1,sum[31:16]);\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/7-Adder%202/","title":"Adder 2","text":""},{"location":"blog/verilog/verilog%20language/Modules/7-Adder%202/#problem-statement","title":"Problem statement","text":"<p>In this exercise, you will create a circuit with two levels of hierarchy. Your <code>top_module</code> will instantiate two copies of <code>add16</code> (provided), each of which will instantiate 16 copies of <code>add1</code> (which you must write). Thus, you must write two modules: <code>top_module</code> and <code>add1</code>.</p> <p>Like module_add, you are given a module <code>add16</code> that performs a 16-bit addition. You must instantiate two of them to create a 32-bit adder. One <code>add16</code> module computes the lower 16 bits of the addition result, while the second <code>add16</code> module computes the upper 16 bits of the result. Your 32-bit adder does not need to handle carry-in (assume 0) or carry-out (ignored).</p> <p>Connect the <code>add16</code> modules together as shown in the diagram below. The provided module <code>add16</code> has the following declaration:</p> Verilog<pre><code>module add16 ( input[15:0] a, input[15:0] b, input cin, output[15:0] sum, output cout );\n</code></pre> <p>Within each <code>add16</code>, 16 full adders (module <code>add1</code>, not provided) are instantiated to actually perform the addition. You must write the full adder module that has the following declaration:</p> Verilog<pre><code>module add1 ( input a, input b, input cin, output sum, output cout );\n</code></pre> <p>Recall that a full adder computes the sum and carry-out of a+b+cin.</p> <p>In summary, there are three modules in this design:</p> <ul> <li><code>top_module</code> \u2014 Your top-level module that contains two of...</li> <li><code>add16</code>, provided \u2014 A 16-bit adder module that is composed of 16 of...</li> <li><code>add1</code> \u2014 A 1-bit full adder module.</li> </ul> <p></p> Verilog<pre><code>module top_module (\n    input [31:0] a,\n    input [31:0] b,\n    output [31:0] sum\n);//\n\nendmodule\n\nmodule add1 ( input a, input b, input cin,   output sum, output cout );\n\n// Full adder module here\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/7-Adder%202/#solution","title":"Solution","text":"Verilog<pre><code>module top_module (\n    input [31:0] a,\n    input [31:0] b,\n    output [31:0] sum\n);\n    wire w1;\n    add16 inst1 (a[15:0],b[15:0],0,sum[15:0],w1);\n    add16 inst2 (a[31:16],b[31:16],w1,sum[31:16]);\nendmodule\n\nmodule add1 ( input a, input b, input cin,   output sum, output cout );\n    assign sum=a^b^cin;\n    assign cout=a&amp;b|a&amp;cin|b&amp;cin;\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/8-Carry-select%20adder/","title":"Carry-select adder","text":""},{"location":"blog/verilog/verilog%20language/Modules/8-Carry-select%20adder/#drawback-of-the-ripple-carry-adder","title":"Drawback of the ripple carry adder","text":"<p>One drawback of the ripple carry adder (See previous exercise) is that the delay for an adder to compute the carry out (from the carry-in, in the worst case) is fairly slow, and the second-stage adder cannot begin computing its carry-out until the first-stage adder has finished. This makes the adder slow. </p>"},{"location":"blog/verilog/verilog%20language/Modules/8-Carry-select%20adder/#improvement","title":"Improvement","text":"<p>One improvement is a carry-select adder, shown below. The first-stage adder is the same as before, but we duplicate the second-stage adder, one assuming carry-in=0 and one assuming carry-in=1, then using a fast 2-to-1 multiplexer to select which result happened to be correct.</p> <p></p>"},{"location":"blog/verilog/verilog%20language/Modules/8-Carry-select%20adder/#problem-statement","title":"Problem statement","text":"<p>In this exercise, you are provided with the same module <code>add16</code> as the previous exercise, which adds two 16-bit numbers with carry-in and produces a carry-out and 16-bit sum. You must instantiate three of these to build the carry-select adder, using your own 16-bit 2-to-1 multiplexer.</p> <p>Connect the modules together as shown in the diagram below. The provided module <code>add16</code> has the following declaration:</p> Verilog<pre><code>module add16 ( input[15:0] a, input[15:0] b, input cin, output[15:0] sum, output cout );\n</code></pre> Verilog<pre><code>module top_module(\n    input [31:0] a,\n    input [31:0] b,\n    output [31:0] sum\n);\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/8-Carry-select%20adder/#solution","title":"Solution","text":"Verilog<pre><code>module top_module(\n    input [31:0] a,\n    input [31:0] b,\n    output [31:0] sum\n);\n    wire sel;\n    wire [15:0] sum_0,sum_1;\n    add16 inst1 (a[15:0],b[15:0],0,sum[15:0],sel);\n    add16 inst2 (a[31:16],b[31:16],0,sum_0);\n    add16 inst3 (a[31:16],b[31:16],1,sum_1);\n    always @* begin\n        case(sel)\n            0: sum[31:16]=sum_0;\n            1: sum[31:16]=sum_1;\n        endcase\n    end\nendmodule\n</code></pre> <ul> <li>\u8bf7\u6ce8\u610falways\u8bed\u53e5\u7684\u7ed3\u6784</li> </ul>"},{"location":"blog/verilog/verilog%20language/Modules/9-Adder-subtractor/","title":"Adder-subtractor","text":""},{"location":"blog/verilog/verilog%20language/Modules/9-Adder-subtractor/#what-is-adder-subtractor","title":"What is adder-subtractor?","text":"<p>An adder-subtractor can be built from an adder by optionally negating one of the inputs, which is equivalent to inverting the input then adding 1. The net result is a circuit that can do two operations: (a + b + 0) and (a + ~b + 1). See Wikipedia if you want a more detailed explanation of how this circuit works.</p>"},{"location":"blog/verilog/verilog%20language/Modules/9-Adder-subtractor/#problem-statement","title":"Problem statement","text":"<p>Build the adder-subtractor below.</p> <p>You are provided with a 16-bit adder module, which you need to instantiate twice:</p> Verilog<pre><code>module add16 ( input[15:0] a, input[15:0] b, input cin, output[15:0] sum, output cout );\n</code></pre> <p>Use a 32-bit wide XOR gate to invert the <code>b</code> input whenever <code>sub</code> is 1. (This can also be viewed as <code>b[31:0]</code> XORed with sub replicated 32 times. See replication operator.). Also connect the <code>sub</code> input to the carry-in of the adder.</p> <p></p> Verilog<pre><code>module top_module(\n    input [31:0] a,\n    input [31:0] b,\n    input sub,\n    output [31:0] sum\n);\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Modules/9-Adder-subtractor/#solution","title":"Solution","text":"Verilog<pre><code>module top_module(\n    input [31:0] a,\n    input [31:0] b,\n    input sub,\n    output [31:0] sum\n);\n    wire [31:0] b_sub;\n    wire cout1;\n    assign b_sub=b^{32{sub}};\n    add16 inst1 (a[15:0],b_sub[15:0],sub,sum[15:0],cout1);\n    add16 inst2 (a[31:16],b_sub[31:16],cout1,sum[31:16]);\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/1-Conditional%20ternary%20operator/","title":"Conditional ternary operator","text":""},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/1-Conditional%20ternary%20operator/#basic-information-of-conditional-ternary-operator","title":"Basic information of conditional ternary operator","text":"<p>Verilog has a ternary conditional operator ( ? : ) much like C:</p> Verilog<pre><code>(condition ? if_true : if_false)\n</code></pre> <p>This can be used to choose one of two values based on condition (a mux!) on one line, without using an if-then inside a combinational always block.</p> <p>Examples:</p> Verilog<pre><code>(0 ? 3 : 5)     // This is 5 because the condition is false.\n(sel ? b : a)   // A 2-to-1 multiplexer between a and b selected by sel.\n\nalways @(posedge clk)         // A T-flip-flop.\n  q &lt;= toggle ? ~q : q;\n\nalways @(*)                   // State transition logic for a one-input FSM\n  case (state)\n    A: next = w ? B : A;\n    B: next = w ? A : B;\n  endcase\n\nassign out = ena ? q : 1'bz;  // A tri-state buffer\n\n((sel[1:0] == 2'h0) ? a :     // A 3-to-1 mux\n (sel[1:0] == 2'h1) ? b :\n                      c )\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/1-Conditional%20ternary%20operator/#practice","title":"Practice","text":""},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/1-Conditional%20ternary%20operator/#problem-statement","title":"Problem statement","text":"<p>Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a &lt; b). Use the conditional operator to make two-way min circuits, then compose a few of them to create a 4-way min circuit. You'll probably want some wire vectors for the intermediate results.</p> Verilog<pre><code>module top_module (\n    input [7:0] a, b, c, d,\n    output [7:0] min);//\n\n    // assign intermediate_result1 = compare? true: false;\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/1-Conditional%20ternary%20operator/#solution","title":"Solution","text":"Verilog<pre><code>module top_module (\n    input [7:0] a, b, c, d,\n    output [7:0] min);//\n    wire [7:0] w1,w2;\n    assign w1=a&gt;b?b:a;\n    assign w2=c&gt;d?d:c;\n    assign min=w1&gt;w2?w2:w1;\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/2-Reduction%20operators/","title":"Reduction operators","text":""},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/2-Reduction%20operators/#when-do-we-need-reduction-operators","title":"When do we need reduction operators?","text":"<p>You're already familiar with bitwise operations between two values, e.g., <code>a &amp; b</code> or <code>a ^ b</code>. Sometimes, you want to create a wide gate that operates on all of the bits of one vector, like <code>(a[0] &amp; a[1] &amp; a[2] &amp; a[3] ... )</code>, which gets tedious if the vector is long.</p> <p>The reduction operators can do AND, OR, and XOR of the bits of a vector, producing one bit of output:</p> Verilog<pre><code>&amp; a[3:0]     // AND: a[3]&amp;a[2]&amp;a[1]&amp;a[0]. Equivalent to (a[3:0] == 4'hf)\n| b[3:0]     // OR:  b[3]|b[2]|b[1]|b[0]. Equivalent to (b[3:0] != 4'h0)\n^ c[2:0]     // XOR: c[2]^c[1]^c[0]\n</code></pre> <p>These are unary operators that have only one operand (similar to the NOT operators ! and ~). You can also invert the outputs of these to create NAND, NOR, and XNOR gates, e.g., <code>(~&amp; d[7:0])</code>.</p> <p>Now you can revisit 4-input gates and 100-input gates.</p>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/2-Reduction%20operators/#practice","title":"Practice","text":""},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/2-Reduction%20operators/#problem-statement","title":"Problem statement","text":"<p>Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.</p> Verilog<pre><code>module top_module (\n    input [7:0] in,\n    output parity); \n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/2-Reduction%20operators/#solution","title":"Solution","text":"Verilog<pre><code>module top_module (\n    input [7:0] in,\n    output parity); \n    assign parity=^in;\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/3-Reduction%20Even%20wider%20gates/","title":"Reduction Even wider gates","text":""},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/3-Reduction%20Even%20wider%20gates/#problem-statement","title":"Problem statement","text":"<p>Build a combinational circuit with 100 inputs, <code>in[99:0]</code>.</p> <p>There are 3 outputs:</p> <ul> <li>out_and: output of a 100-input AND gate.</li> <li>out_or: output of a 100-input OR gate.</li> <li>out_xor: output of a 100-input XOR gate.</li> </ul> Verilog<pre><code>module top_module( \n    input [99:0] in,\n    output out_and,\n    output out_or,\n    output out_xor \n);\n    assign out_and=&amp;in;\n    assign out_or=|in;\n    assign out_xor=^in;\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/4-Combinational%20for-loop%20Vector%20reversal%202/","title":"Combinational for-loop Vector reversal 2","text":""},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/4-Combinational%20for-loop%20Vector%20reversal%202/#problem-statement","title":"Problem statement","text":"<p>Given a 100-bit input vector [99:0], reverse its bit ordering.</p> Verilog<pre><code>module top_module( \n    input [99:0] in,\n    output [99:0] out\n);\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/4-Combinational%20for-loop%20Vector%20reversal%202/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( \n    input [99:0] in,\n    output [99:0] out\n);\n    always @(*) begin\n        for (int i=0;i&lt;$bits(out);i++)\n            out[i]=in[$bits(out)-i-1];\n    end\nendmodule\n</code></pre> <ul> <li>$bits() is a system function that returns the width of a signal.</li> <li>$bits(out) is 100 because out is 100 bits wide.</li> </ul>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/5-Combinational%20for-loop%20255-bit%20population%20cout/","title":"Combinational for-loop 255-bit population cout","text":""},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/5-Combinational%20for-loop%20255-bit%20population%20cout/#problem-statement","title":"Problem statement","text":"<p>A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.</p> Verilog<pre><code>module top_module( \n    input [254:0] in,\n    output [7:0] out );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/5-Combinational%20for-loop%20255-bit%20population%20cout/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( \n    input [254:0] in,\n    output [7:0] out );\n    always @(*) begin\n        out=0;\n        for (int i=0;i&lt;$bits(in);i++)\n            out=out+in[i];  // out+=in[i]\n    end\nendmodule\n</code></pre> <ul> <li>\u6ce8\u610f\u9700\u8981\u5bf9out\u521d\u59cb\u5316</li> </ul>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/6-Generate%20for-loop%20100-bit%20binary%20adder2/","title":"Generate for-loop 100-bit binary adder2","text":""},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/6-Generate%20for-loop%20100-bit%20binary%20adder2/#problem-statement","title":"Problem statement","text":"<p>Create a 100-bit binary ripple-carry adder by instantiating 100 full adders. The adder adds two 100-bit numbers and a carry-in to produce a 100-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from each full adder in the ripple-carry adder. cout[99] is the final carry-out from the last full adder, and is the carry-out you usually see.</p> Verilog<pre><code>module top_module( \n    input [99:0] a, b,\n    input cin,\n    output [99:0] cout,\n    output [99:0] sum );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/6-Generate%20for-loop%20100-bit%20binary%20adder2/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( \n    input [99:0] a, b,\n    input cin,\n    output [99:0] cout,\n    output [99:0] sum );\n    always @(*) begin\n        {cout[0],sum[0]}=a[0]+b[0]+cin;\n        for (int i=1;i&lt;$bits(cout);i++)\n            {cout[i],sum[i]}=a[i]+b[i]+cout[i-1];\n    end\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/7-Generate%20for-loop%20100-digit%20BCD%20adder/","title":"Generate for-loop 100-digit BCD adder","text":""},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/7-Generate%20for-loop%20100-digit%20BCD%20adder/#problem-statement","title":"Problem statement","text":"<p>You are provided with a BCD one-digit adder named <code>bcd_fadd</code> that adds two BCD digits and carry-in, and produces a sum and carry-out.</p> Verilog<pre><code>module bcd_fadd (\n    input [3:0] a,\n    input [3:0] b,\n    input     cin,\n    output   cout,\n    output [3:0] sum );\n</code></pre> <p>Instantiate 100 copies of <code>bcd_fadd</code> to create a 100-digit BCD ripple-carry adder. Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) and a carry-in to produce a 100-digit sum and carry out.</p> Verilog<pre><code>module top_module( \n    input [399:0] a, b,\n    input cin,\n    output cout,\n    output [399:0] sum );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/More%20verilog%20features/7-Generate%20for-loop%20100-digit%20BCD%20adder/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( \n    input [399:0] a, b,\n    input cin,\n    output cout,\n    output [399:0] sum );\n    wire [99:0] w1;\n    assign cout=w1[99];\n    genvar i;\n    generate\n        for (i=0;i&lt;100;i++) begin:block1\n            if (i==0) begin\n                bcd_fadd inst (a[i*4+3:i*4],b[i*4+3:i*4],cin,w1[i],sum[i*4+3:i*4]);\n            end\n            else begin\n                bcd_fadd inst (a[i*4+3:i*4],b[i*4+3:i*4],w1[i-1],w1[i],sum[i*4+3:i*4]);\n            end\n        end\n     endgenerate\nendmodule\n</code></pre> <ul> <li>for\u5faa\u73af\u540e\u9762\u7684\u90a3\u4e2a\u6a21\u5757\u540d\u79f0\u662f\u5fc5\u8981\u7684</li> <li>genvar\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7279\u522b\u7528\u4e8egenerate for\u8bed\u53e5</li> </ul>"},{"location":"blog/verilog/verilog%20language/Procedures/1-Always%20blocks%20%28combinational%29/","title":"Always blocks (combinational)","text":""},{"location":"blog/verilog/verilog%20language/Procedures/1-Always%20blocks%20%28combinational%29/#why-we-need-always-blocks","title":"Why we need always blocks?","text":"<p>Since digital circuits are composed of logic gates connected with wires, any circuit can be expressed as some combination of modules and assign statements. However, sometimes this is not the most convenient way to describe the circuit. Procedures (of which <code>always</code> blocks are one example) provide an alternative syntax for describing circuits.</p> <p>For synthesizing hardware, two types of always blocks are relevant:</p> <ul> <li>Combinational: <code>always @(*)</code></li> <li>Clocked: <code>always @(posedge clk)</code></li> </ul> <p>Combinational always blocks are equivalent to assign statements, thus there is always a way to express a combinational circuit both ways. The choice between which to use is mainly an issue of which syntax is more convenient. The syntax for code inside a procedural block is different from code that is outside. Procedural blocks have a richer set of statements (e.g., if-then, case), cannot contain continuous assignments, but also introduces many new non-intuitive ways of making errors. (Procedural continuous assignments do exist, but are somewhat different from continuous assignments, and are not synthesizable.)</p> <p>For example, the assign and combinational always block describe the same circuit. Both create the same blob of combinational logic. Both will recompute the output whenever any of the inputs (right side) changes value. </p> Verilog<pre><code>assign out1 = a &amp; b | c ^ d;\nalways @(*) out2 = a &amp; b | c ^ d;\n</code></pre> <p></p> <p>A note on wire vs. reg: The left-hand-side of an assign statement must be a net type (e.g., <code>wire</code>), while the left-hand-side of a procedural assignment (in an always block) must be a variable type (e.g., <code>reg</code>). These types (wire vs. reg) have nothing to do with what hardware is synthesized, and is just syntax left over from Verilog's use as a hardware simulation language.</p>"},{"location":"blog/verilog/verilog%20language/Procedures/1-Always%20blocks%20%28combinational%29/#problem-statement","title":"Problem statement","text":"<p>Build an AND gate using both an assign statement and a combinational always block. (Since assign statements and combinational always blocks function identically, there is no way to enforce that you're using both methods. But you're here for practice, right?...)</p> Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module(\n    input a, \n    input b,\n    output wire out_assign,\n    output reg out_alwaysblock\n);\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/1-Always%20blocks%20%28combinational%29/#solution","title":"Solution","text":"Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module(\n    input a, \n    input b,\n    output wire out_assign,\n    output reg out_alwaysblock\n);\n    assign out_assign=a&amp;b;\n    always @(*) begin\n        out_alwaysblock=a&amp;b;\n    end\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/2-Always%20blocks%20%28clocked%29/","title":"Always blocks (clocked)","text":""},{"location":"blog/verilog/verilog%20language/Procedures/2-Always%20blocks%20%28clocked%29/#what-is-clocked-always-block","title":"What is clocked always block?","text":"<p>For hardware synthesis, there are two types of <code>always</code> blocks that are relevant:</p> <ul> <li>Combinational: <code>always @(*)</code></li> <li>Clocked: <code>always @(posedge clk)</code></li> </ul> <p>Clocked always blocks create a blob of combinational logic just like combinational always blocks, but also creates a set of flip-flops (or \"registers\") at the output of the blob of combinational logic. Instead of the outputs of the blob of logic being visible immediately, the outputs are visible only immediately after the next (posedge clk).</p>"},{"location":"blog/verilog/verilog%20language/Procedures/2-Always%20blocks%20%28clocked%29/#blocking-vs-non-blocking-assignment","title":"Blocking vs. Non-Blocking Assignment","text":"<p>There are three types of assignments in Verilog:</p> <ul> <li>Continuous assignments (<code>assign x = y;</code>). Can only be used when not inside a procedure (\"always block\").</li> <li>Procedural blocking assignment: (<code>x = y;</code>). Can only be used inside a procedure.</li> <li>Procedural non-blocking assignment: (<code>x &lt;= y;</code>). Can only be used inside a procedure.</li> </ul> <p>In a combinational always block, use blocking assignments. In a clocked always block, use non-blocking assignments. A full understanding of why is not particularly useful for hardware design and requires a good understanding of how Verilog simulators keep track of events. Not following this rule results in extremely hard to find errors that are both non-deterministic and differ between simulation and synthesized hardware.</p>"},{"location":"blog/verilog/verilog%20language/Procedures/2-Always%20blocks%20%28clocked%29/#practice","title":"Practice","text":""},{"location":"blog/verilog/verilog%20language/Procedures/2-Always%20blocks%20%28clocked%29/#problem-statement","title":"Problem statement","text":"<p>Build an XOR gate three ways, using an assign statement, a combinational always block, and a clocked always block. Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.</p> <p></p> Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module(\n    input clk,\n    input a,\n    input b,\n    output wire out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff   );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/2-Always%20blocks%20%28clocked%29/#solution","title":"Solution","text":"Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module(\n    input clk,\n    input a,\n    input b,\n    output wire out_assign,\n    output reg out_always_comb,\n    output reg out_always_ff   );\n    assign out_assign=a^b;\n    always @(*) out_always_comb=a^b;\n    always @(posedge clk) out_always_ff&lt;=a^b;\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/3-If%20statement/","title":"If statement","text":""},{"location":"blog/verilog/verilog%20language/Procedures/3-If%20statement/#introduction-of-if-statement","title":"Introduction of if statement","text":"<p>An <code>if</code> statement usually creates a 2-to-1 multiplexer, selecting one input if the condition is true, and the other input if the condition is false.</p> <p></p> Verilog<pre><code>always @(*) begin\n    if (condition) begin\n        out = x;\n    end\n    else begin\n        out = y;\n    end\nend\n</code></pre> <p>This is equivalent to using a continuous <code>assign</code>ment with a conditional operator:</p> Verilog<pre><code>assign out = (condition) ? x : y;\n</code></pre> <p>However, the procedural <code>if</code> statement provides a new way to make mistakes. The circuit is combinational only if <code>out</code> is always assigned a value.</p>"},{"location":"blog/verilog/verilog%20language/Procedures/3-If%20statement/#practice","title":"Practice","text":""},{"location":"blog/verilog/verilog%20language/Procedures/3-If%20statement/#problem-statement","title":"Problem statement","text":"<p>Build a 2-to-1 mux that chooses between <code>a</code> and <code>b</code>. Choose <code>b</code> if both <code>sel_b1</code> and <code>sel_b2</code> are true. Otherwise, choose <code>a</code>. Do the same twice, once using <code>assign</code> statements and once using a procedural if statement.</p> sel_b1 sel_b2 out_assign out_always 0 0 a 0 1 a 1 0 a 1 1 b Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module(\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output wire out_assign,\n    output reg out_always   ); \n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/3-If%20statement/#solution","title":"Solution","text":"Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module(\n    input a,\n    input b,\n    input sel_b1,\n    input sel_b2,\n    output wire out_assign,\n    output reg out_always   ); \n    assign out_assign=(sel_b1&amp;sel_b2==1) ? b:a;\n    always @(*) begin\n        if (sel_b1&amp;sel_b2==1) begin\n            out_always=b;\n        end\n        else begin\n            out_always=a;\n        end\n    end\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/4-If%20statement%20latches/","title":"If statement latches","text":""},{"location":"blog/verilog/verilog%20language/Procedures/4-If%20statement%20latches/#how-to-avoid-making-latches","title":"How to avoid making latches?","text":"<p>When designing circuits, you must think first in terms of circuits:</p> <ul> <li>I want this logic gate</li> <li>I want a combinational blob of logic that has these inputs and produces these outputs</li> <li>I want a combinational blob of logic followed by a set of flip-flops</li> </ul> <p>What you must not do is write the code first, then hope it generates a proper circuit.</p> <ul> <li>If (cpu_overheated) then shut_off_computer = 1;</li> <li>If (~arrived) then keep_driving = ~gas_tank_empty;</li> </ul> <p>Syntactically-correct code does not necessarily result in a reasonable circuit (combinational logic + flip-flops). The usual reason is: \"What happens in the cases other than those you specified?\". Verilog's answer is: Keep the outputs unchanged.</p> <p>This behaviour of \"keep outputs unchanged\" means the current state needs to be remembered, and thus produces a latch. Combinational logic (e.g., logic gates) cannot remember any state. Watch out for <code>Warning (10240): ... inferring latch(es)\"</code> messages. Unless the latch was intentional, it almost always indicates a bug. Combinational circuits must have a value assigned to all outputs under all conditions. This usually means you always need <code>else</code> clauses or a default value assigned to the outputs.</p>"},{"location":"blog/verilog/verilog%20language/Procedures/4-If%20statement%20latches/#demonstration","title":"Demonstration","text":""},{"location":"blog/verilog/verilog%20language/Procedures/4-If%20statement%20latches/#problem-statement","title":"Problem statement","text":"<p>The following code contains incorrect behaviour that creates a latch. Fix the bugs so that you will shut off the computer only if it's really overheated, and stop driving if you've arrived at your destination or you need to refuel.</p> <p></p> Verilog<pre><code>always @(*) begin\n    if (cpu_overheated)\n       shut_off_computer = 1;\nend\n\nalways @(*) begin\n    if (~arrived)\n       keep_driving = ~gas_tank_empty;\nend\n</code></pre> Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\n    input      cpu_overheated,\n    output reg shut_off_computer,\n    input      arrived,\n    input      gas_tank_empty,\n    output reg keep_driving  ); //\n\n    always @(*) begin\n        if (cpu_overheated)\n           shut_off_computer = 1;\n    end\n\n    always @(*) begin\n        if (~arrived)\n           keep_driving = ~gas_tank_empty;\n    end\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/4-If%20statement%20latches/#solution","title":"Solution","text":"Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\n    input      cpu_overheated,\n    output reg shut_off_computer,\n    input      arrived,\n    input      gas_tank_empty,\n    output reg keep_driving  ); //\n\n    always @(*) begin\n        if (cpu_overheated) begin\n           shut_off_computer = 1;\n        end\n        else begin\n            shut_off_computer = 0;\n        end\n    end\n\n    always @(*) begin\n        if (~arrived &amp; ~gas_tank_empty) begin\n           keep_driving = 1'b1;\n        end\n        else begin\n           keep_driving = 1'b0;\n        end\n    end\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/5-Case%20statement/","title":"Case statement","text":""},{"location":"blog/verilog/verilog%20language/Procedures/5-Case%20statement/#information-of-case-statement","title":"Information of case statement","text":"<p>Case statements in Verilog are nearly equivalent to a sequence of if-elseif-else that compares one expression to a list of others. Its syntax and functionality differs from the <code>switch</code> statement in C.</p> Verilog<pre><code>always @(*) begin     // This is a combinational circuit\n    case (in)\n      1'b1: begin \n               out = 1'b1;  // begin-end if &gt;1 statement\n            end\n      1'b0: out = 1'b0;\n      default: out = 1'bx;\n    endcase\nend\n</code></pre> <ul> <li>The case statement begins with <code>case</code> and each \"case item\" ends with a colon. There is no \"switch\".</li> <li>Each case item can execute exactly one statement. This makes the \"break\" used in C unnecessary. But this means that if you need more than one statement, you must use <code>begin ... end</code>.</li> <li>Duplicate (and partially overlapping) case items are permitted. The first one that matches is used. C does not allow duplicate case items.</li> </ul>"},{"location":"blog/verilog/verilog%20language/Procedures/5-Case%20statement/#practice","title":"Practice","text":""},{"location":"blog/verilog/verilog%20language/Procedures/5-Case%20statement/#problem-statement","title":"Problem statement","text":"<p>Case statements are more convenient than if statements if there are a large number of cases. So, in this exercise, create a 6-to-1 multiplexer. When <code>sel</code> is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.</p> <p>Be careful of inferring latches (See.always_if2)</p> Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module ( \n    input [2:0] sel, \n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out   );//\n\n    always@(*) begin  // This is a combinational circuit\n        case(...)\n    end\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/5-Case%20statement/#solution","title":"Solution","text":"Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module ( \n    input [2:0] sel, \n    input [3:0] data0,\n    input [3:0] data1,\n    input [3:0] data2,\n    input [3:0] data3,\n    input [3:0] data4,\n    input [3:0] data5,\n    output reg [3:0] out   );//\n\n    always@(*) begin  // This is a combinational circuit\n        case(sel)\n            0: out=data0;\n            1: out=data1;\n            2: out=data2;\n            3: out=data3;\n            4: out=data4;\n            5: out=data5;\n            default: out=0;\n        endcase \n    end\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/6-Priority%20encoder/","title":"Priority encoder","text":""},{"location":"blog/verilog/verilog%20language/Procedures/6-Priority%20encoder/#what-is-priority-encoder","title":"What is priority encoder?","text":"<p>A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first <code>1</code> bit in the vector. For example, a 8-bit priority encoder given the input <code>8'b10010000</code> would output <code>3'd4</code>, because bit[4] is first bit that is high.</p>"},{"location":"blog/verilog/verilog%20language/Procedures/6-Priority%20encoder/#practice","title":"Practice","text":""},{"location":"blog/verilog/verilog%20language/Procedures/6-Priority%20encoder/#problem-statement","title":"Problem statement","text":"<p>Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.</p> Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\n    input [3:0] in,\n    output reg [1:0] pos  );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/6-Priority%20encoder/#solution","title":"Solution","text":"Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\n    input [3:0] in,\n    output reg [1:0] pos  );\n    always @(*) begin\n        case (in)\n            4'b0000:pos=0;\n            4'b0001:pos=2'd0;\n            4'b0010:pos=2'd1;\n            4'b0011:pos=2'd0;\n            4'b0100:pos=2'd2;\n            4'b0101:pos=2'd0;\n            4'b0110:pos=2'd1;\n            4'b0111:pos=2'd0;\n            4'b1000:pos=2'd3;\n            4'b1001:pos=2'd0;\n            4'b1010:pos=2'd1;\n            4'b1011:pos=2'd0;\n            4'b1100:pos=2'd2;\n            4'b1101:pos=2'd0;\n            4'b1110:pos=2'd1;\n            4'b1111:pos=2'd0;\n        endcase\n    end\nendmodule\n</code></pre> <ul> <li>There is an easier way to code this. See the next problem (always_casez).</li> </ul>"},{"location":"blog/verilog/verilog%20language/Procedures/7-Priority%20with%20casez/","title":"Priority with casez","text":""},{"location":"blog/verilog/verilog%20language/Procedures/7-Priority%20with%20casez/#introduction-of-casez","title":"Introduction of casez","text":"<p>Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is <code>1</code>. Report zero if the input vector has no bits that are high. For example, the input <code>8'b10010000</code> should output <code>3'd4</code>, because bit[4] is first bit that is high.</p> <p>From the previous exercise (always_case2), there would be 256 cases in the case statement. We can reduce this (down to 9 cases) if the case items in the case statement supported don't-care bits. This is what <code>casez</code> is for: It treats bits that have the value <code>z</code> as don't-care in the comparison.</p> <p>For example, this would implement the 4-input priority encoder from the previous exercise:</p> Verilog<pre><code>always @(*) begin\n    casez (in[3:0])\n        4'bzzz1: out = 0;   // in[3:1] can be anything\n        4'bzz1z: out = 1;\n        4'bz1zz: out = 2;\n        4'b1zzz: out = 3;\n        default: out = 0;\n    endcase\nend\n</code></pre> <p>A case statement behaves as though each item is checked sequentially (in reality, a big combinational logic function). Notice how there are certain inputs (e.g., <code>4'b1111</code>) that will match more than one case item. The first match is chosen (so <code>4'b1111</code> matches the first item, <code>out = 0</code>, but not any of the later ones).</p> <ul> <li>There is also a similar <code>casex</code> that treats both <code>x</code> and <code>z</code> as don't-care. I don't see much purpose to using it over <code>casez</code>.</li> <li>The digit <code>?</code> is a synonym(\u540c\u4e49\u8bcd) for <code>z</code>. so <code>2'bz0</code> is the same as <code>2'b?0</code></li> </ul> <p>It may be less error-prone to explicitly specify the priority behaviour rather than rely on the ordering of the case items. For example, the following will still behave the same way if some of the case items were reordered, because any bit pattern can only match at most one case item:</p> Verilog<pre><code>   casez (in[3:0])\n        4'bzzz1: ...\n        4'bzz10: ...\n        4'bz100: ...\n        4'b1000: ...\n        default: ...\n    endcase\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/7-Priority%20with%20casez/#practice","title":"Practice","text":""},{"location":"blog/verilog/verilog%20language/Procedures/7-Priority%20with%20casez/#problem-statement","title":"Problem statement","text":"<p>Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is <code>1</code>. Report zero if the input vector has no bits that are high. For example, the input <code>8'b10010000</code> should output <code>3'd4</code>, because bit[4] is first bit that is high.</p> Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\n    input [7:0] in,\n    output reg [2:0] pos );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/7-Priority%20with%20casez/#solution","title":"Solution","text":"Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\n    input [7:0] in,\n    output reg [2:0] pos );\n    always @(*) begin\n        casez (in)\n            8'bzzzz_zzz1: pos=0;\n            8'bzzzz_zz1z: pos=1;\n            8'bzzzz_z1zz: pos=2;\n            8'bzzzz_1zzz: pos=3;\n            8'bzzz1_zzzz: pos=4;\n            8'bzz1z_zzzz: pos=5;\n            8'bz1zz_zzzz: pos=6;\n            8'b1zzz_zzzz: pos=7;\n            8'b0000_0000: pos=0;\n        endcase\n    end\nendmodule\n</code></pre> <ul> <li>Notice that you should use <code>casez (input)</code> if you want to use casez statement. The letter z is  neccessary.</li> </ul>"},{"location":"blog/verilog/verilog%20language/Procedures/8-Avoiding%20latches/","title":"Avoiding latches","text":""},{"location":"blog/verilog/verilog%20language/Procedures/8-Avoiding%20latches/#how-to-avoid-numorous-latches","title":"How to avoid numorous latches?","text":"<p>Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.</p> Scancode [15:0] Arrow key <code>16'he06b</code> left arrow <code>16'he072</code> down arrow <code>16'he074</code> right arrow <code>16'he075</code> up arrow Anything else none <p>Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.</p> <p>To avoid creating latches, all outputs must be assigned a value in all possible conditions (See also always_if2). Simply having a <code>default</code> case is not enough. You must assign a value to all four outputs in all four cases and the default case. This can involve a lot of unnecessary typing. One easy way around this is to assign a \"default value\" to the outputs before the case statement:</p> Verilog<pre><code>always @(*) begin\n    up = 1'b0; down = 1'b0; left = 1'b0; right = 1'b0;\n    case (scancode)\n        ... // Set to 1 as necessary.\n    endcase\nend\n</code></pre> <p>This style of code ensures the outputs are assigned a value (of 0) in all possible cases unless the case statement overrides the assignment. This also means that a <code>default:</code> case item becomes unnecessary.</p> <p>Reminder: The logic synthesizer generates a combinational circuit that behaves equivalently to what the code describes. Hardware does not \"execute\" the lines of code in sequence.</p>"},{"location":"blog/verilog/verilog%20language/Procedures/8-Avoiding%20latches/#practice","title":"Practice","text":""},{"location":"blog/verilog/verilog%20language/Procedures/8-Avoiding%20latches/#problem-statement","title":"Problem statement","text":"Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up  ); \n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Procedures/8-Avoiding%20latches/#solution","title":"Solution","text":"Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\n    input [15:0] scancode,\n    output reg left,\n    output reg down,\n    output reg right,\n    output reg up  ); \n    always @(*) begin\n        up = 1'b0; down = 1'b0; left = 1'b0; right = 1'b0;\n        case (scancode)\n            16'he06b: left=1;\n            16'he072: down=1;\n            16'he074: right=1;\n            16'he075: up=1;\n        endcase\n    end\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/1-Vectors/","title":"Vectors","text":""},{"location":"blog/verilog/verilog%20language/Vector/1-Vectors/#what-is-vectors","title":"What is vectors?","text":"<p>Vectors are used to group related signals using one name to make it more convenient to manipulate. For example, <code>wire [7:0] w;</code> declares an 8-bit vector named <code>w</code> that is functionally equivalent to having 8 separate wires.</p> <p>Notice that the declaration of a vector places the dimensions before the name of the vector, which is unusual compared to C syntax. However, the part select has the dimensions after the vector name as you would expect.</p> <p>Example:</p> Verilog<pre><code>wire [99:0] my_vector;      // Declare a 100-element vector\nassign out = my_vector[10]; // Part-select one bit out of the vector\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/1-Vectors/#problem-statement","title":"Problem statement","text":"<p>Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output <code>o0</code> to the input vector's position 0, <code>o1</code> to position 1, etc.</p> <p></p> <p>Notice:In a diagram, a tick mark with a number next to it indicates the width of the vector (or \"bus\"), rather than drawing a separate line for each bit in the vector.</p> Verilog<pre><code>module top_module ( \n    input wire [2:0] vec,\n    output wire [2:0] outv,\n    output wire o2,\n    output wire o1,\n    output wire o0  ); // Module body starts after module declaration\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/1-Vectors/#solution","title":"Solution","text":"Verilog<pre><code>module top_module ( \n    input wire [2:0] vec,\n    output wire [2:0] outv,\n    output wire o2,\n    output wire o1,\n    output wire o0  ); // Module body starts after module declaration\n    assign outv=vec,o0=vec[0],o1=vec[1],o2=vec[2];\n    //  This is ok too: assign {o2, o1, o0} = vec;\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/2-Vectors%20in%20more%20detial/","title":"Vectors in more detial","text":""},{"location":"blog/verilog/verilog%20language/Vector/2-Vectors%20in%20more%20detial/#declaring-vectors","title":"Declaring Vectors","text":"<p>Vectors must be declared:</p> Verilog<pre><code>type [upper:lower] vector_name;\n</code></pre> <p><code>type</code> specifies the datatype of the vector. This is usually <code>wire</code> or <code>reg</code>. If you are declaring a input or output port, the type can additionally include the port type (e.g., <code>input</code> or <code>output</code>) as well. Some examples:</p> Verilog<pre><code>wire [7:0] w;         // 8-bit wire\nreg  [4:1] x;         // 4-bit reg\noutput reg [0:0] y;   // 1-bit reg that is also an output port (this is still a vector)\ninput wire [3:-2] z;  // 6-bit wire input (negative ranges are allowed)\noutput [3:0] a;       // 4-bit output wire. Type is 'wire' unless specified otherwise.\nwire [0:7] b;         // 8-bit wire where b[0] is the most-significant bit.\n</code></pre> <p>The endianness (or, informally, \"direction\") of a vector is whether the the least significant bit has a lower index (little-endian, e.g., [3:0]) or a higher index (big-endian, e.g., [0:3]). In Verilog, once a vector is declared with a particular endianness, it must always be used the same way. e.g., writing <code>vec[0:3]</code> when <code>vec</code> is declared <code>wire [3:0] vec;</code> is illegal. Being consistent with endianness is good practice, as weird bugs occur if vectors of different endianness are assigned or used together.</p> <ul> <li>\u5411\u91cf\u7684\u65b9\u5411\u6027\u9700\u8981\u4fdd\u6301\u4e00\u81f4</li> </ul>"},{"location":"blog/verilog/verilog%20language/Vector/2-Vectors%20in%20more%20detial/#implicit-nets","title":"Implicit nets","text":"<p>Implicit nets are often a source of hard-to-detect bugs. In Verilog, net-type signals can be implicitly created by an <code>assign</code> statement or by attaching something undeclared to a module port. Implicit nets are always one-bit wires and causes bugs if you had intended to use a vector. Disabling creation of implicit nets can be done using the <code>`default_nettype none</code> directive.</p> <p>Example:</p> Verilog<pre><code>wire [2:0] a, c;    // Two vectors\nassign a = 3'b101;  // a = 101\nassign b = a;       // b =   1  implicitly-created wire\nassign c = b;       // c = 001  &lt;-- bug\nmy_module i1 (d,e); // d and e are implicitly one-bit wide if not declared.\n                    // This could be a bug if the port was intended to be a vector.\n</code></pre> <p>Adding <code>`default_nettype none</code> would make the second line of code an error, which makes the bug more visible.</p>"},{"location":"blog/verilog/verilog%20language/Vector/2-Vectors%20in%20more%20detial/#unpacked-vs-packed-arrays","title":"Unpacked vs. Packed Arrays","text":"<p>You may have noticed that in declarations, the vector indices are written before the vector name. This declares the \"packed\" dimensions of the array, where the bits are \"packed\" together into a blob (this is relevant in a simulator, but not in hardware). The unpacked dimensions are declared after the name. They are generally used to declare memory arrays. Since ECE253 didn't cover memory arrays, we have not used packed arrays in this course. See http://www.asic-world.com/systemverilog/data_types10.html for more details.</p> <p>Example:</p> Verilog<pre><code>reg [7:0] mem [255:0];   // 256 unpacked elements, each of which is a 8-bit packed vector of reg.\nreg mem2 [28:0];         // 29 unpacked elements, each of which is a 1-bit reg.\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/2-Vectors%20in%20more%20detial/#accessing-vector-elements-part-select","title":"Accessing Vector Elements: Part-Select","text":"<p>Accessing an entire vector is done using the vector name. For example:</p> Verilog<pre><code>assign w = a;\n</code></pre> <p>takes the entire 4-bit vector a and assigns it to the entire 8-bit vector w (declarations are taken from above). If the lengths of the right and left sides don't match, it is zero-extended or truncated as appropriate.</p> <p>The part-select operator can be used to access a portion of a vector:</p> Verilog<pre><code>w[3:0]      // Only the lower 4 bits of w\nx[1]        // The lowest bit of x\nx[1:1]      // ...also the lowest bit of x\nz[-1:-2]    // Two lowest bits of z\nb[3:0]      // Illegal. Vector part-select must match the direction of the declaration.\nb[0:3]      // The *upper* 4 bits of b.\nassign w[3:0] = b[0:3];    // Assign upper 4 bits of b to lower 4 bits of w. w[3]=b[0], w[2]=b[1], etc.\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/2-Vectors%20in%20more%20detial/#practice","title":"Practice","text":""},{"location":"blog/verilog/verilog%20language/Vector/2-Vectors%20in%20more%20detial/#problem-statement","title":"Problem statement","text":"<p>Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.</p> Verilog<pre><code>`default_nettype none     // Disable implicit nets. Reduces some types of bugs.\nmodule top_module( \n    input wire [15:0] in,\n    output wire [7:0] out_hi,\n    output wire [7:0] out_lo );\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/2-Vectors%20in%20more%20detial/#solution","title":"Solution","text":"Verilog<pre><code>`default_nettype none     // Disable implicit nets. Reduces some types of bugs.\nmodule top_module( \n    input wire [15:0] in,\n    output wire [7:0] out_hi,\n    output wire [7:0] out_lo );\n    assign {out_hi,out_lo}=in;\n    // Also: assign out_hi = in[15:8];\n    //       assign out_lo = in[7:0];\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/3-Vector%20part%20select/","title":"Vector part select","text":""},{"location":"blog/verilog/verilog%20language/Vector/3-Vector%20part%20select/#problem-statement","title":"Problem statement","text":"<p>A 32-bit vector can be viewed as containing 4 bytes (bits [31:24], [23:16], etc.). Build a circuit that will reverse the byte ordering of the 4-byte word.</p> <p>Example:</p> Verilog<pre><code>AaaaaaaaBbbbbbbbCcccccccDddddddd =&gt; DdddddddCcccccccBbbbbbbbAaaaaaaa\n</code></pre> <ul> <li>This operation is often used when the endianness of a piece of data needs to be swapped, for example between little-endian x86 systems and the big-endian formats used in many Internet protocols.</li> </ul> Verilog<pre><code>module top_module( \n    input [31:0] in,\n    output [31:0] out );//\n\n    // assign out[31:24] = ...;\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/3-Vector%20part%20select/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( \n    input [31:0] in,\n    output [31:0] out );\n    assign out={in[7:0],in[15:8],in[23:16],in[31:24]};\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/4-Bitwise%20operators/","title":"Bitwise operators","text":""},{"location":"blog/verilog/verilog%20language/Vector/4-Bitwise%20operators/#bitwise-vs-logical-operators","title":"Bitwise vs. Logical Operators","text":"<p>Earlier, we mentioned that there are bitwise and logical versions of the various boolean operators (e.g., norgate). When using vectors, the distinction between the two operator types becomes important. A bitwise operation between two N-bit vectors replicates the operation for each bit of the vector and produces a N-bit output, while a logical operation treats the entire vector as a boolean value (true = non-zero, false = zero) and produces a 1-bit output.</p>"},{"location":"blog/verilog/verilog%20language/Vector/4-Bitwise%20operators/#problem-statement","title":"Problem statement","text":"<p>Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of <code>b</code> in the upper half of <code>out_not</code> (i.e., bits [5:3]), and the inverse of <code>a</code> in the lower half.</p> <p></p> Verilog<pre><code>module top_module( \n    input [2:0] a,\n    input [2:0] b,\n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/4-Bitwise%20operators/#solutio","title":"Solutio","text":"Verilog<pre><code>module top_module( \n    input [2:0] a,\n    input [2:0] b,\n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n    assign out_or_bitwise=a|b;\n    assign out_or_logical=a||b;\n    assign out_not={~b,~a};\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/5-Four%20input%20gates/","title":"Four input gates","text":""},{"location":"blog/verilog/verilog%20language/Vector/5-Four%20input%20gates/#problem-statement","title":"Problem statement","text":"<p>Build a combinational circuit with four inputs, <code>in[3:0]</code>.</p> <p>There are 3 outputs:</p> <ul> <li>out_and: output of a 4-input AND gate.</li> <li>out_or: output of a 4-input OR gate.</li> <li>out_xor: output of a 4-input XOR gate.</li> </ul> Verilog<pre><code>module top_module( \n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/5-Four%20input%20gates/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( \n    input [3:0] in,\n    output out_and,\n    output out_or,\n    output out_xor\n);\n    assign out_and=in[3]&amp;in[2]&amp;in[1]&amp;in[0];\n    assign out_or=in[3]|in[2]|in[1]|in[0];\n    assign out_xor=in[3]^in[2]^in[1]^in[0];\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/6-Vector%20concatenation%20operator/","title":"Vector concatenation(\u8fde\u63a5) operator","text":""},{"location":"blog/verilog/verilog%20language/Vector/6-Vector%20concatenation%20operator/#what-is-vector-concatenation-operator","title":"What is vector concatenation operator?","text":"<p>Part selection was used to select portions of a vector. The concatenation operator <code>{a,b,c}</code> is used to create larger vectors by concatenating smaller portions of a vector together.</p> Verilog<pre><code>{3'b111, 3'b000} =&gt; 6'b111000\n{1'b1, 1'b0, 3'b101} =&gt; 5'b10101\n{4'ha, 4'd10} =&gt; 8'b10101010     // 4'ha and 4'd10 are both 4'b1010 in binary\n</code></pre> <p>Concatenation needs to know the width of every component (or how would you know the length of the result?). Thus, <code>{1, 2, 3}</code> is illegal and results in the error message: <code>unsized constants are not allowed in concatenations</code>.</p> <p>The concatenation operator can be used on both the left and right sides of assignments.</p> Verilog<pre><code>input [15:0] in;\noutput [23:0] out;\nassign {out[7:0], out[15:8]} = in;         // Swap two bytes. Right side and left side are both 16-bit vectors.\nassign out[15:0] = {in[7:0], in[15:8]};    // This is the same thing.\nassign out = {in[7:0], in[15:8]};       // This is different. The 16-bit vector on the right is extended to\n                                        // match the 24-bit vector on the left, so out[23:16] are zero.\n                                        // In the first two examples, out[23:16] are not assigned.\n</code></pre> <ul> <li>\u5173\u6ce8\u7b2c\u56db\u884c\u8bed\u6cd5<code>assign out[15:0] = {in[7:0], in[15:8]};</code></li> </ul>"},{"location":"blog/verilog/verilog%20language/Vector/6-Vector%20concatenation%20operator/#practice","title":"Practice","text":""},{"location":"blog/verilog/verilog%20language/Vector/6-Vector%20concatenation%20operator/#problem-statement","title":"Problem statement","text":"<p>Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two <code>1</code> bits:</p> <p></p> Verilog<pre><code>module top_module (\n    input [4:0] a, b, c, d, e, f,\n    output [7:0] w, x, y, z );//\n\n    // assign { ... } = { ... };\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/6-Vector%20concatenation%20operator/#solution","title":"Solution","text":"Verilog<pre><code>module top_module (\n    input [4:0] a, b, c, d, e, f,\n    output [7:0] w, x, y, z );\n    assign {w,x,y,z}={a,b,c,d,e,f,2'b11};\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/7-Vector%20reversal%201/","title":"Vector reversal 1","text":""},{"location":"blog/verilog/verilog%20language/Vector/7-Vector%20reversal%201/#problem-statement","title":"Problem statement","text":"<p>Given an 8-bit input vector [7:0], reverse its bit ordering</p> Verilog<pre><code>module top_module( \n    input [7:0] in,\n    output [7:0] out\n);\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/7-Vector%20reversal%201/#hints","title":"Hints","text":"<ul> <li><code>assign out[7:0] = in[0:7];</code> does not work because Verilog does not allow vector bit ordering to be flipped.</li> <li>The concatenation operator may save a bit of coding, allowing for 1 assign statement instead of 8.</li> </ul> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u4e0d\u80fd\u50cf\u5728python\u4e00\u6837\u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u9006\u5e8f\u6765\u76f4\u63a5\u89e3\u51b3\u95ee\u9898\u4e86\uff0c\u56e0\u4e3a\u5728verilog\u4e2d\uff0c\u4e00\u4e2a\u5411\u91cf\u7684\u65b9\u5411\u662f\u56fa\u5b9a\u7684\uff0c\u5b9a\u4e49\u7684\u65f6\u5019\u662f[7:0]\uff0c\u4f46\u4f7f\u7528\u7684\u65f6\u5019\u662f[0:7]\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002</p> <p>\u770b\u8d77\u6765\u9898\u76ee\u662f\u8981\u6211\u4eec\u4f7f\u7528vector concatenation operator\u6765\u89e3\u51b3\u4e86\u3002</p>"},{"location":"blog/verilog/verilog%20language/Vector/7-Vector%20reversal%201/#solution","title":"Solution","text":"Verilog<pre><code>module top_module( \n    input [7:0] in,\n    output [7:0] out\n);\n    assign out={in[0],in[1],in[2],in[3],in[4],in[5],in[6],in[7]};\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/7-Vector%20reversal%201/#how-to-use-loop-to-duel-with-this-problem","title":"How to use loop to duel with this problem?","text":""},{"location":"blog/verilog/verilog%20language/Vector/7-Vector%20reversal%201/#for-loops","title":"for-loops","text":"<p>Create a combinational always block. This creates combinational logic that computes the same result as sequential code. </p> <ul> <li>for-loops describe circuit behaviour, not structure, so they can only be used inside procedural blocks (e.g., always block).</li> </ul> <p>The circuit created (wires and gates) does NOT do any iteration: It only produces the same result</p> <p>AS IF the iteration occurred. In reality, a logic synthesizer will do the iteration at compile(\u7f16\u8bd1) time to figure out what circuit to produce. (In contrast, a Verilog simulator will execute the loop sequentially during simulation.)</p> Verilog<pre><code>always @(*) begin   \n    for (int i=0; i&lt;8; i++) // int is a SystemVerilog type. Use integer for pure Verilog.\n        out[i] = in[8-i-1];\nend\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/7-Vector%20reversal%201/#generate-for-loop","title":"generate-for loop","text":"<p>It is also possible to do this with a generate-for loop. Generate loops look like procedural for loops, but are quite different in concept, and not easy to understand. </p> <p>Generate loops are used to make instantiations of \"things\" (Unlike procedural loops, it doesn't describe actions). These \"things\" are assign statements, module instantiations, net/variable declarations, and procedural blocks (things you can create when NOT inside a procedure). </p> <p>Generate loops (and genvars) are evaluated entirely at compile time. You can think of generate blocks as a form of preprocessing to generate more code, which is then run though the logic synthesizer. </p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8egenerate-for loop\u6765\u8bf4\uff0c\u672c\u8d28\u4e0a\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u5c06\u4ee3\u7801\u91cd\u590d\u751f\u6210\u4e86\u51e0\u904d</p> <p>In the example below, the generate-for loop first creates 8 assign statements at compile time, which is then synthesized.</p> Verilog<pre><code>generate\n    genvar i;\n    for (i=0; i&lt;8; i = i+1) begin: my_block_name\n        assign out[i] = in[8-i-1];\n    end\nendgenerate\n</code></pre> <p>Note that because of its intended usage (generating code at compile time), there are some restrictions on how you use them.</p> <ul> <li>Quartus requires a generate-for loop to have a named begin-end block attached (in this example, named \"my_block_name\").</li> <li>Inside the loop body, genvars are read only.</li> </ul>"},{"location":"blog/verilog/verilog%20language/Vector/8-Replication%20operator/","title":"Replication operator","text":""},{"location":"blog/verilog/verilog%20language/Vector/8-Replication%20operator/#what-is-replication-operator-and-why-we-need-them","title":"What is replication operator and why we need them?","text":"<p>The concatenation operator allowed concatenating together vectors to form a larger vector. But sometimes you want the same thing concatenated together many times, and it is still tedious to do something like <code>assign a = {b,b,b,b,b,b};</code>. The replication operator allows repeating a vector and concatenating them together:</p> Verilog<pre><code>{num{vector}}\n</code></pre> <p>This replicates vector by num times. num must be a constant. Both sets of braces are required.</p> <p>Examples:</p> Verilog<pre><code>{5{1'b1}}           // 5'b11111 (or 5'd31 or 5'h1f)\n{2{a,b,c}}          // The same as {a,b,c,a,b,c}\n{3'd5, {2{3'd6}}}   // 9'b101_110_110. It's a concatenation of 101 with\n                    // the second vector, which is two copies of 3'b110.\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/8-Replication%20operator/#practice","title":"Practice","text":""},{"location":"blog/verilog/verilog%20language/Vector/8-Replication%20operator/#background-information","title":"Background information","text":"<p>One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3).</p>"},{"location":"blog/verilog/verilog%20language/Vector/8-Replication%20operator/#problem-statement","title":"Problem statement","text":"<p>Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.</p> Verilog<pre><code>module top_module (\n    input [7:0] in,\n    output [31:0] out );//\n\n    // assign out = { replicate-sign-bit , the-input };\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/8-Replication%20operator/#solution","title":"Solution","text":"Verilog<pre><code>module top_module (\n    input [7:0] in,\n    output [31:0] out );\n    assign out={{24{in[7]}},in};\nendmodule\n</code></pre> <ul> <li>\u5c24\u5176\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c{num{vector}}\u53ea\u6709\u5728\u5de6\u53f3\u90fd\u52a0\u4e0a\u62ec\u53f7\u7684\u60c5\u51b5\u4e0b\u624d\u662f\u4e00\u4e2a\u5411\u91cf</li> </ul>"},{"location":"blog/verilog/verilog%20language/Vector/9-More%20replication/","title":"More replication","text":""},{"location":"blog/verilog/verilog%20language/Vector/9-More%20replication/#problem-statement","title":"Problem statement","text":"<p>Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal.</p> Verilog<pre><code>out[24] = ~a ^ a;   // a == a, so out[24] is always 1.\nout[23] = ~a ^ b;\nout[22] = ~a ^ c;\n...\nout[ 1] = ~e ^ d;\nout[ 0] = ~e ^ e;\n</code></pre> <p></p> <p>As the diagram shows, this can be done more easily using the replication and concatenation operators.</p> <ul> <li>The top vector is a concatenation of 5 repeats of each input</li> <li>The bottom vector is 5 repeats of a concatenation of the 5 inputs</li> </ul> Verilog<pre><code>module top_module (\n    input a, b, c, d, e,\n    output [24:0] out );//\n\n    // The output is XNOR of two vectors created by \n    // concatenating and replicating the five inputs.\n    // assign out = ~{ ... } ^ { ... };\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/verilog%20language/Vector/9-More%20replication/#solution","title":"Solution","text":"Verilog<pre><code>module top_module (\n    input a, b, c, d, e,\n    output [24:0] out );\n    assign out=~{{5{a}},{5{b}},{5{c}},{5{d}},{5{e}}}^{5{a,b,c,d,e}};\nendmodule\n</code></pre>"},{"location":"blog/verilog/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/1-Step%20one/","title":"\u7b2c\u4e00\u4e2a\u5185\u5bb9","text":""},{"location":"blog/verilog/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/1-Step%20one/#problem-statement","title":"Problem Statement","text":"<p>We're going to start with a small bit of HDL to get familiar with the interface used by HDLBits. Here's the description of the circuit you need to build for this exercise:</p> <p>Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).</p>"},{"location":"blog/verilog/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/1-Step%20one/#_2","title":"\u9898\u76ee\u4ee3\u7801","text":"Verilog<pre><code>module top_module( output one );\n\n// Insert your code here\n    assign one = [fixme];\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/1-Step%20one/#_3","title":"\u5206\u6790","text":"<p>\u53ef\u4ee5\u770b\u5230<code>assign one = [fixme];</code>\u8fd9\u6bb5\u660e\u663e\u662f\u8981\u6211\u4eec\u586b\u5165\u4e00\u4e2a\u9ad8\u7535\u4f4d\u3002</p>"},{"location":"blog/verilog/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/1-Step%20one/#_4","title":"\u7b54\u6848","text":"Verilog<pre><code>module top_module( output one );\n\n    assign one = 1'b1;\n\nendmodule\n</code></pre> <ul> <li>\u6ce8\u610f\uff1a\u8d4b\u503c\u7684\u65f6\u5019\u9700\u8981\u786e\u5b9a\u6bd4\u7279\u4f4d\u6570</li> </ul>"},{"location":"blog/verilog/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/2-Zero/","title":"Zero","text":""},{"location":"blog/verilog/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/2-Zero/#problem-statement","title":"Problem Statement","text":"<p>Build a circuit with no inputs and one output that outputs a constant <code>0</code></p> <p>Now that you've worked through the previous problem, let's see if you can do a simple problem without the hints.</p>"},{"location":"blog/verilog/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/2-Zero/#_1","title":"\u9898\u76ee\u4ee3\u7801","text":"Verilog<pre><code>module top_module(\n    output zero\n);// Module body starts after semicolon\n\nendmodule\n</code></pre>"},{"location":"blog/verilog/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/2-Zero/#_2","title":"\u89e3\u7b54","text":"<p>\u548c\u4e0a\u9898\u4e00\u6837</p> Verilog<pre><code>module top_module(\n    output zero\n);// Module body starts after semicolon\n    assign zero=1'b0;\nendmodule\n</code></pre>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/","title":"\u5bfc\u8bba","text":""},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/#_2","title":"\u8bfe\u7a0b\u4ecb\u7ecd","text":""},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/#_3","title":"\u5bfc\u5165","text":"<p>\u4e2d\u56fd\u6ca1\u6709\u81ea\u53d1\u4ea7\u751f\u7684\u5b66\u79d1</p>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/#_4","title":"\u8bfe\u7a0b\u4e3b\u9898","text":""},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/#_5","title":"\u8bfe\u7a0b\u8bbe\u8ba1","text":""},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/#_6","title":"\u6559\u5b66\u5f62\u5f0f","text":"<ul> <li>\u63a2\u7d22\u6027\u7814\u7a76\uff1a\u60f3\u63a2\u7a76\u4ec0\u4e48\u3001\u63a2\u7a76\u7684\u65b9\u6cd5...</li> <li>\u7ebf\u4e0a\u7ebf\u4e0b\u7ed3\u5408\uff1a\u7ebf\u4e0a\u8bfe\u7a0b</li> </ul>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/#_7","title":"\u8bfe\u7a0b\u8981\u6c42","text":""},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%B8%80%E8%8A%82/","title":"\u7b2c\u4e00\u8282","text":""},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%B8%80%E8%8A%82/#_2","title":"\u4f60\u5fc3\u76ee\u4e2d\u7406\u60f3\u7684\u5927\u5b66","text":"<p>\u6211\u5fc3\u76ee\u4e2d\uff0c\u7406\u60f3\u7684\u5927\u5b66\u5177\u5907\u4ee5\u4e0b\u51e0\u4e2a\u7279\u70b9\uff1a</p> <ol> <li> <p>\u591a\u5143\u5316\u548c\u5305\u5bb9\u6027\uff1a\u7406\u60f3\u7684\u5927\u5b66\u5e94\u8be5\u6b22\u8fce\u6765\u81ea\u4e0d\u540c\u6587\u5316\u3001\u80cc\u666f\u3001\u89c2\u70b9\u7684\u5b66\u751f\u548c\u6559\u5e08\uff0c\u8fd9\u79cd\u591a\u6837\u6027\u53ef\u4ee5\u4fc3\u8fdb\u601d\u60f3\u7684\u4ea4\u6d41\u548c\u521b\u65b0\u3002   \u67d0\u4e00\u4e2a\u60f3\u6cd5\u5728\u73b0\u5728\u770b\u6765\u4e0d\u4e00\u5b9a\u6b63\u786e\uff0c\u4f46\u662f\u968f\u7740\u65f6\u4ee3\u7684\u53d1\u5c55\u548c\u793e\u4f1a\u4f53\u7cfb\u7684\u53d8\u5316\uff0c\u8fd9\u4e00\u60f3\u6cd5\u53ef\u80fd\u4f1a\u53d8\u5f97\u6b63\u786e\u3002\u201c\u6b63\u786e\u6709\u65f6\u6548\u6027\u201d\uff0c\u56e0\u6b64\u5305\u5bb9\u624d\u91cd\u8981\uff0c\u56e0\u4e3a\u6709\u4e86\u5305\u5bb9\uff0c\u539f\u672c\u8fd9\u4e9b\u5e94\u8be5\u88ab\u6dd8\u6c70\u7684\u60f3\u6cd5\u53ef\u4ee5\u7ee7\u7eed\u7814\u7a76\u4f20\u627f\u4e0b\u53bb\uff0c\u6700\u540e\u5728\u5b83\u5e94\u8be5\u5728\u7684\u65f6\u4ee3\u4e2d\u53d1\u51fa\u5149\u5f69\u3002</p> </li> <li> <p>\u5353\u8d8a\u7684\u5b66\u672f\u6c1b\u56f4\uff1a\u5927\u5b66\u5e94\u9f13\u52b1\u5b66\u672f\u81ea\u7531\uff0c\u63d0\u4f9b\u5f3a\u5927\u7684\u7814\u7a76\u652f\u6301\uff0c\u5e2e\u52a9\u5b66\u751f\u548c\u6559\u6388\u5728\u5404\u81ea\u9886\u57df\u53d6\u5f97\u7a81\u7834\uff0c\u540c\u65f6\u9f13\u52b1\u8de8\u5b66\u79d1\u5408\u4f5c\u3002</p> </li> <li> <p>STS\uff08Science, Technology, and Society\uff0c\u79d1\u5b66\u3001\u6280\u672f\u4e0e\u793e\u4f1a\uff09\u662f\u4e00\u95e8\u8de8\u5b66\u79d1\u9886\u57df\uff0c\u7814\u7a76\u79d1\u5b66\u4e0e\u6280\u672f\u5728\u793e\u4f1a\u4e2d\u7684\u89d2\u8272\u3001\u76f8\u4e92\u5f71\u54cd\u4ee5\u53ca\u5b83\u4eec\u5bf9\u793e\u4f1a\u6587\u5316\u3001\u653f\u6cbb\u3001\u7ecf\u6d4e\u7b49\u591a\u65b9\u9762\u7684\u5f71\u54cd\u3002STS\u5b66\u79d1\u65e8\u5728\u5206\u6790\u79d1\u5b66\u6280\u672f\u4e0d\u4ec5\u4f5c\u4e3a\u6280\u672f\u5de5\u5177\u6216\u81ea\u7136\u73b0\u8c61\u7684\u4f5c\u7528\uff0c\u8fd8\u4f5c\u4e3a\u793e\u4f1a\u6d3b\u52a8\u3001\u6743\u529b\u7ed3\u6784\u3001\u4f26\u7406\u8bae\u9898\u7b49\u590d\u6742\u4f53\u7cfb\u7684\u4e00\u90e8\u5206\u3002\u4ee5\u4e0b\u662fSTS\u7684\u6838\u5fc3\u5185\u5bb9\u7b80\u8981\uff1a</p> </li> <li> </li> <li> <p>\u521b\u65b0\u4e0e\u5b9e\u8df5\u5e76\u91cd\uff1a\u4e0d\u4ec5\u6ce8\u91cd\u7406\u8bba\u77e5\u8bc6\u7684\u4f20\u6388\uff0c\u8fd8\u5e94\u8be5\u5f3a\u8c03\u5b9e\u8df5\u4e0e\u521b\u65b0\u7684\u7ed3\u5408\u3002\u9f13\u52b1\u5b66\u751f\u901a\u8fc7\u9879\u76ee\u3001\u5b9e\u4e60\u3001\u5b9e\u9a8c\u5ba4\u7814\u7a76\u7b49\u65b9\u5f0f\u5c06\u5b66\u672f\u5e94\u7528\u4e8e\u73b0\u5b9e\u4e16\u754c\u3002</p> </li> <li> <p>\u5b66\u751f\u4e3a\u4e2d\u5fc3\uff1a\u7406\u60f3\u7684\u5927\u5b66\u5173\u6ce8\u5b66\u751f\u7684\u5168\u9762\u53d1\u5c55\uff0c\u4e0d\u4ec5\u63d0\u4f9b\u4f18\u8d28\u7684\u6559\u80b2\u8d44\u6e90\uff0c\u8fd8\u63d0\u4f9b\u5fc3\u7406\u5065\u5eb7\u652f\u6301\u3001\u804c\u4e1a\u53d1\u5c55\u670d\u52a1\u548c\u4e30\u5bcc\u7684\u8bfe\u5916\u6d3b\u52a8\u3002</p> </li> <li> <p>\u5168\u7403\u5316\u89c6\u91ce\uff1a\u63d0\u4f9b\u5168\u7403\u5b66\u4e60\u548c\u4ea4\u6d41\u673a\u4f1a\uff0c\u8ba9\u5b66\u751f\u6709\u673a\u4f1a\u4e0e\u56fd\u9645\u793e\u4f1a\u63a5\u8f68\uff0c\u62d3\u5bbd\u89c6\u91ce\uff0c\u4e3a\u5168\u7403\u6027\u95ee\u9898\u5bfb\u627e\u89e3\u51b3\u65b9\u6848\u3002</p> </li> <li> <p>\u53ef\u6301\u7eed\u6027\u548c\u793e\u4f1a\u8d23\u4efb\uff1a\u7406\u60f3\u7684\u5927\u5b66\u5e94\u81f4\u529b\u4e8e\u53ef\u6301\u7eed\u53d1\u5c55\uff0c\u63a8\u52a8\u73af\u5883\u4fdd\u62a4\uff0c\u540c\u65f6\u9f13\u52b1\u5b66\u751f\u5173\u6ce8\u793e\u4f1a\u95ee\u9898\uff0c\u5e76\u5728\u6bd5\u4e1a\u540e\u4e3a\u793e\u4f1a\u4f5c\u51fa\u79ef\u6781\u8d21\u732e\u3002</p> </li> </ol> <p>\u4f60\u7406\u60f3\u4e2d\u7684\u5927\u5b66\u53c8\u662f\u600e\u6837\u7684\u5462\uff1f</p>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%B8%80%E8%8A%82/#1","title":"1. \u5b66\u79d1\u80cc\u666f","text":"<ul> <li>STS\u8d77\u6e90\u4e8e20\u4e16\u7eaa\u4e2d\u540e\u671f\uff0c\u968f\u7740\u79d1\u5b66\u6280\u672f\u5bf9\u793e\u4f1a\u5f71\u54cd\u529b\u7684\u589e\u5f3a\uff0c\u5b66\u8005\u4eec\u5f00\u59cb\u63a2\u8ba8\u79d1\u5b66\u6280\u672f\u4e0d\u518d\u4ec5\u4ec5\u662f\u4e2d\u7acb\u7684\u77e5\u8bc6\u751f\u4ea7\u6d3b\u52a8\uff0c\u800c\u662f\u4e0e\u793e\u4f1a\u3001\u653f\u6cbb\u3001\u6587\u5316\u7d27\u5bc6\u76f8\u5173\u3002</li> <li>\u5b83\u7ed3\u5408\u4e86\u793e\u4f1a\u5b66\u3001\u54f2\u5b66\u3001\u5386\u53f2\u5b66\u3001\u653f\u6cbb\u5b66\u7b49\u591a\u4e2a\u5b66\u79d1\u7684\u89c6\u89d2\uff0c\u7814\u7a76\u79d1\u5b66\u6280\u672f\u7684\u53d1\u5c55\u8fc7\u7a0b\u4ee5\u53ca\u5b83\u4eec\u4e0e\u793e\u4f1a\u7684\u53cc\u5411\u4e92\u52a8\u3002</li> </ul> <p>### 2. \u6838\u5fc3\u4e3b\u9898</p> <ul> <li>\u79d1\u5b66\u4e0e\u793e\u4f1a\uff1aSTS\u63a2\u8ba8\u79d1\u5b66\u4f5c\u4e3a\u793e\u4f1a\u5b9e\u8df5\u7684\u8fc7\u7a0b\uff0c\u79d1\u5b66\u77e5\u8bc6\u7684\u751f\u4ea7\u53d7\u5230\u793e\u4f1a\u3001\u653f\u6cbb\u3001\u6587\u5316\u7b49\u56e0\u7d20\u7684\u5f71\u54cd\uff0c\u800c\u79d1\u5b66\u53d1\u5c55\u4e5f\u53cd\u8fc7\u6765\u5851\u9020\u4e86\u793e\u4f1a\u7684\u4ef7\u503c\u89c2\u548c\u884c\u4e3a\u6a21\u5f0f\u3002</li> <li>\u6280\u672f\u4e0e\u793e\u4f1a\uff1a\u6280\u672f\u5e76\u975e\u4e2d\u7acb\u7684\u5de5\u5177\uff0c\u800c\u662f\u793e\u4f1a\u6587\u5316\u3001\u7ecf\u6d4e\u548c\u653f\u6cbb\u73af\u5883\u7684\u4ea7\u7269\u3002STS\u7814\u7a76\u6280\u672f\u521b\u65b0\u7684\u793e\u4f1a\u80cc\u666f\u53ca\u5176\u5bf9\u793e\u4f1a\u7ed3\u6784\u7684\u5f71\u54cd\u3002</li> <li>\u79d1\u5b66\u7684\u793e\u4f1a\u6784\u5efa\uff1a\u79d1\u5b66\u77e5\u8bc6\u5e76\u975e\u5b8c\u5168\u5ba2\u89c2\u6216\u72ec\u7acb\uff0c\u800c\u662f\u901a\u8fc7\u793e\u4f1a\u8fc7\u7a0b\u548c\u7fa4\u4f53\u534f\u4f5c\u5f62\u6210\u7684\uff0c\u79d1\u5b66\u5bb6\u793e\u533a\u7684\u5171\u8bc6\u3001\u793e\u4f1a\u8d44\u6e90\u3001\u6743\u529b\u5173\u7cfb\u7b49\u90fd\u4f1a\u5f71\u54cd\u79d1\u5b66\u53d1\u73b0\u7684\u65b9\u5411\u3002</li> <li>\u79d1\u6280\u7684\u4f26\u7406\u4e0e\u653f\u7b56\uff1aSTS\u5f3a\u8c03\u79d1\u5b66\u6280\u672f\u5bf9\u793e\u4f1a\u548c\u73af\u5883\u7684\u5f71\u54cd\uff0c\u5e76\u5bf9\u79d1\u6280\u653f\u7b56\u3001\u4f26\u7406\u8bae\u9898\uff08\u5982\u9690\u79c1\u3001\u4eba\u5de5\u667a\u80fd\u3001\u57fa\u56e0\u5de5\u7a0b\u7b49\uff09\u8fdb\u884c\u6279\u5224\u6027\u5206\u6790\uff0c\u5021\u5bfc\u8d1f\u8d23\u4efb\u7684\u6280\u672f\u5f00\u53d1\u4e0e\u5e94\u7528\u3002</li> </ul> <p>### 3. STS\u7684\u5173\u952e\u7406\u8bba\u4e0e\u65b9\u6cd5</p> <ul> <li>\u793e\u4f1a\u5efa\u6784\u8bba\uff08SCOT\uff09\uff1a\u79d1\u5b66\u6280\u672f\u7684\u793e\u4f1a\u5efa\u6784\u7406\u8bba\uff0c\u8ba4\u4e3a\u6280\u672f\u548c\u79d1\u5b66\u7684\u9009\u62e9\u3001\u8bbe\u8ba1\u4ee5\u53ca\u53d1\u5c55\u8def\u5f84\u53d7\u5230\u793e\u4f1a\u3001\u653f\u6cbb\u548c\u7ecf\u6d4e\u529b\u91cf\u7684\u5f71\u54cd\u3002</li> <li>\u884c\u4e3a\u8005\u7f51\u7edc\u7406\u8bba\uff08ANT\uff09\uff1a\u63d0\u51fa\u79d1\u5b66\u6280\u672f\u7684\u53d1\u5c55\u4e0d\u4ec5\u4ec5\u7531\u79d1\u5b66\u5bb6\u6216\u5de5\u7a0b\u5e08\u63a8\u52a8\uff0c\u975e\u4eba\u7c7b\u56e0\u7d20\uff08\u5982\u6280\u672f\u88c5\u7f6e\u3001\u5de5\u5177\u7b49\uff09\u4e5f\u5728\u79d1\u6280\u7f51\u7edc\u4e2d\u53d1\u6325\u4f5c\u7528\uff0c\u5f62\u6210\u590d\u6742\u7684\u4e92\u52a8\u7f51\u7edc\u3002</li> <li>\u6280\u672f\u51b3\u5b9a\u8bba\u7684\u53cd\u601d\uff1aSTS\u53cd\u5bf9\u7b80\u5355\u7684\u6280\u672f\u51b3\u5b9a\u8bba\uff0c\u8ba4\u4e3a\u6280\u672f\u5e76\u4e0d\u4f1a\u81ea\u52a8\u51b3\u5b9a\u793e\u4f1a\u7684\u8d70\u5411\uff0c\u800c\u662f\u793e\u4f1a\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u5f71\u54cd\u6280\u672f\u7684\u4ea7\u751f\u548c\u5e94\u7528\u3002</li> </ul> <p>### 4. STS\u7684\u5b9e\u9645\u5e94\u7528</p> <ul> <li>\u516c\u5171\u653f\u7b56\u4e0e\u79d1\u6280\u8bc4\u4f30\uff1aSTS\u53ef\u4ee5\u5e2e\u52a9\u653f\u5e9c\u548c\u673a\u6784\u5236\u5b9a\u79d1\u6280\u653f\u7b56\uff0c\u8bc4\u4f30\u6280\u672f\u8fdb\u6b65\u5bf9\u793e\u4f1a\u7684\u6f5c\u5728\u5f71\u54cd\uff0c\u5982\u6c14\u5019\u53d8\u5316\u3001\u516c\u5171\u536b\u751f\u3001\u6570\u636e\u9690\u79c1\u7b49\u9886\u57df\u7684\u653f\u7b56\u5efa\u8bae\u3002</li> <li>\u793e\u4f1a\u516c\u6b63\u4e0e\u6280\u672f\u4f26\u7406\uff1aSTS\u5021\u5bfc\u79d1\u6280\u5e94\u4fc3\u8fdb\u793e\u4f1a\u7684\u516c\u5e73\u6b63\u4e49\uff0c\u907f\u514d\u6280\u672f\u52a0\u5267\u793e\u4f1a\u7684\u4e0d\u5e73\u7b49\u73b0\u8c61\uff0c\u7279\u522b\u5728\u4eba\u5de5\u667a\u80fd\u3001\u751f\u7269\u6280\u672f\u3001\u73af\u5883\u6280\u672f\u7b49\u65b9\u9762\u6709\u6df1\u5165\u8ba8\u8bba\u3002</li> </ul> <p>### 5. STS\u7684\u5f53\u4ee3\u5173\u6ce8\u70b9</p> <ul> <li>\u6c14\u5019\u53d8\u5316\u4e0e\u73af\u5883\u53ef\u6301\u7eed\u6027\uff1a\u79d1\u5b66\u4e0e\u6280\u672f\u5982\u4f55\u5e94\u5bf9\u5168\u7403\u6c14\u5019\u53d8\u5316\u548c\u73af\u5883\u95ee\u9898\uff0c\u5982\u4f55\u4f7f\u6280\u672f\u8fdb\u6b65\u4e0e\u53ef\u6301\u7eed\u53d1\u5c55\u76f8\u7ed3\u5408\u3002</li> <li>\u6570\u5b57\u6280\u672f\u4e0e\u793e\u4f1a\uff1a\u4e92\u8054\u7f51\u3001\u4eba\u5de5\u667a\u80fd\u3001\u5927\u6570\u636e\u7b49\u6280\u672f\u5bf9\u9690\u79c1\u3001\u5b89\u5168\u3001\u5c31\u4e1a\u548c\u793e\u4f1a\u4f26\u7406\u7684\u6df1\u8fdc\u5f71\u54cd\u3002</li> <li>\u79d1\u5b66\u4f20\u64ad\u4e0e\u516c\u4f17\u53c2\u4e0e\uff1a\u5982\u4f55\u6709\u6548\u5730\u5411\u516c\u4f17\u4f20\u64ad\u79d1\u5b66\u77e5\u8bc6\uff0c\u5e76\u4fc3\u4f7f\u516c\u4f17\u79ef\u6781\u53c2\u4e0e\u79d1\u5b66\u6280\u672f\u76f8\u5173\u7684\u51b3\u7b56\u8fc7\u7a0b\u3002</li> </ul> <p>\u603b\u7ed3\uff1aSTS\u662f\u4e00\u4e2a\u8de8\u5b66\u79d1\u9886\u57df\uff0c\u65e8\u5728\u901a\u8fc7\u7efc\u5408\u793e\u4f1a\u79d1\u5b66\u4e0e\u81ea\u7136\u79d1\u5b66\u7684\u65b9\u6cd5\uff0c\u7814\u7a76\u79d1\u5b66\u6280\u672f\u4e0e\u793e\u4f1a\u4e4b\u95f4\u7684\u4e92\u52a8\u5173\u7cfb\u3002\u5b83\u4e0d\u4ec5\u5173\u6ce8\u79d1\u6280\u7684\u8fdb\u6b65\uff0c\u8fd8\u8003\u5bdf\u79d1\u6280\u5bf9\u793e\u4f1a\u3001\u653f\u6cbb\u3001\u4f26\u7406\u7b49\u65b9\u9762\u7684\u5e7f\u6cdb\u5f71\u54cd\uff0c\u63d0\u51fa\u4e86\u8bb8\u591a\u5173\u4e8e\u79d1\u6280\u8fdb\u6b65\u7684\u6279\u5224\u6027\u89c1\u89e3\u548c\u793e\u4f1a\u8d23\u4efb\u7684\u8ba8\u8bba\u3002</p>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%B8%80%E8%8A%82/#_3","title":"\u4f60\u8ba4\u4e3a\u4e2d\u56fd\u6587\u5316\u7684\u8981\u4e49\u662f\u4ec0\u4e48\uff1f","text":"<p>\u4e2d\u56fd\u6587\u5316\u7684\u8981\u4e49\u53ef\u4ee5\u6982\u62ec\u4e3a\u591a\u5143\u800c\u4e30\u5bcc\u7684\u601d\u60f3\u4f53\u7cfb\uff0c\u5176\u4e2d\u51e0\u4e2a\u6838\u5fc3\u8981\u7d20\u5bf9\u7406\u89e3\u4e2d\u56fd\u6587\u5316\u81f3\u5173\u91cd\u8981\uff1a</p> <ol> <li> <p>\u5112\u5bb6\u601d\u60f3\uff1a\u5112\u5bb6\u5f3a\u8c03\u4f26\u7406\u9053\u5fb7\u3001\u4ec1\u7231\u3001\u5fe0\u5b5d\u3001\u793c\u4e49\u7b49\u3002\u5b54\u5b50\u7684\u5b66\u8bf4\u4e3b\u5f20\u4e2a\u4eba\u7684\u9053\u5fb7\u4fee\u517b\u3001\u5bb6\u5ead\u548c\u8c10\u4ee5\u53ca\u793e\u4f1a\u79e9\u5e8f\u7684\u91cd\u8981\u6027\u3002\u8fd9\u79cd\u601d\u60f3\u6df1\u523b\u5f71\u54cd\u4e86\u4e2d\u56fd\u7684\u5bb6\u5ead\u7ed3\u6784\u3001\u793e\u4f1a\u7b49\u7ea7\u548c\u653f\u6cbb\u5236\u5ea6\u3002</p> </li> <li> <p>\u9053\u5bb6\u54f2\u5b66\uff1a\u9053\u5bb6\u91cd\u89c6\u81ea\u7136\u548c\u65e0\u4e3a\uff0c\u5f3a\u8c03\u4eba\u4e0e\u81ea\u7136\u7684\u548c\u8c10\u5171\u751f\u3002\u8001\u5b50\u548c\u5e84\u5b50\u7684\u601d\u60f3\u5f3a\u8c03\u987a\u5e94\u81ea\u7136\u6cd5\u5219\uff0c\u51cf\u5c11\u4eba\u4e3a\u5e72\u9884\uff0c\u8ffd\u6c42\u5185\u5728\u7684\u5b81\u9759\u4e0e\u81ea\u7531\u3002</p> </li> <li> <p>\u4f5b\u6559\u5f71\u54cd\uff1a\u867d\u7136\u4f5b\u6559\u8d77\u6e90\u4e8e\u5370\u5ea6\uff0c\u4f46\u5b83\u5728\u4e2d\u56fd\u7ecf\u8fc7\u6539\u826f\u548c\u878d\u5408\uff0c\u6210\u4e3a\u7985\u5b97\u7b49\u5177\u6709\u4e2d\u56fd\u7279\u8272\u7684\u4f5b\u6559\u6d41\u6d3e\u3002\u4f5b\u6559\u5bf9\u4e2d\u56fd\u4eba\u7684\u751f\u6b7b\u89c2\u3001\u751f\u6d3b\u6001\u5ea6\u4ee5\u53ca\u827a\u672f\u90fd\u6709\u6df1\u8fdc\u5f71\u54cd\u3002</p> </li> <li> <p>\u751f\u6b7b\u8f6e\u56de\u4e0e\u56e0\u679c\u62a5\u5e94\uff1a\u4f5b\u6559\u7684\u6838\u5fc3\u6559\u4e49\u4e4b\u4e00\u662f\u5173\u4e8e\u751f\u6b7b\u8f6e\u56de\u548c\u56e0\u679c\u62a5\u5e94\u7684\u5b66\u8bf4\uff0c\u5f3a\u8c03\u5584\u6076\u56e0\u679c\u4f1a\u51b3\u5b9a\u4eba\u7684\u8f6e\u56de\u8f6c\u4e16\u3002\u8fd9\u4e00\u601d\u60f3\u4e3a\u4e2d\u56fd\u4f20\u7edf\u7684\u9053\u5fb7\u4f53\u7cfb\u63d0\u4f9b\u4e86\u65b0\u7684\u89c6\u89d2\uff0c\u5e76\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u8865\u5145\u548c\u4e30\u5bcc\u4e86\u5112\u5bb6\u7684\u4f26\u7406\u89c2\u5ff5\u3002</p> <p>\u6d85\u69c3\u4e0e\u89e3\u8131\uff1a\u4f5b\u6559\u8ba4\u4e3a\u4eba\u751f\u5145\u6ee1\u82e6\u96be\uff0c\u53ea\u6709\u901a\u8fc7\u4fee\u884c\u624d\u80fd\u6700\u7ec8\u8fbe\u5230\u6d85\u69c3\uff0c\u6446\u8131\u751f\u6b7b\u8f6e\u56de\u3002\u8fd9\u79cd\u89e3\u8131\u89c2\u5ff5\u5f71\u54cd\u4e86\u8bb8\u591a\u4e2d\u56fd\u7684\u54f2\u5b66\u5bb6\u548c\u6587\u4eba\uff0c\u4ed6\u4eec\u901a\u8fc7\u601d\u8003\u4eba\u751f\u7684\u82e6\u96be\uff0c\u63a2\u5bfb\u8d85\u8d8a\u751f\u6b7b\u7684\u667a\u6167\u3002</p> <p>\u7985\u5b97\u7684\u54f2\u5b66\u601d\u60f3\uff1a\u7985\u5b97\u662f\u4e2d\u56fd\u5316\u4f5b\u6559\u7684\u4ee3\u8868\uff0c\u5176\u6838\u5fc3\u601d\u60f3\u5f3a\u8c03\u201c\u987f\u609f\u201d\uff0c\u5373\u901a\u8fc7\u5185\u5fc3\u7684\u76f4\u63a5\u9886\u609f\u800c\u4e0d\u4f9d\u8d56\u5916\u5728\u7684\u7ecf\u5178\u4e0e\u6559\u6761\u3002\u8fd9\u79cd\u601d\u7ef4\u65b9\u5f0f\u6df1\u523b\u5f71\u54cd\u4e86\u4e2d\u56fd\u54f2\u5b66\uff0c\u7279\u522b\u662f\u5728\u5b8b\u660e\u7406\u5b66\u548c\u540e\u6765\u7684\u6587\u5b66\u3001\u827a\u672f\u521b\u4f5c\u4e2d\uff0c\u5f3a\u8c03\u76f4\u89c9\u548c\u4e2a\u4f53\u7684\u5185\u5728\u4f53\u9a8c\u3002</p> <p>\u7985\u5b97\u4e0e\u827a\u672f\u7684\u7ed3\u5408\uff1a\u7985\u5b97\u7684\u7b80\u6d01\u4e0e\u81ea\u7136\u7684\u54f2\u5b66\u89c2\u5ff5\u5bf9\u4e2d\u56fd\u7684\u4e66\u6cd5\u3001\u7ed8\u753b\u3001\u8bd7\u6b4c\u7b49\u827a\u672f\u5f62\u5f0f\u4ea7\u751f\u4e86\u91cd\u8981\u5f71\u54cd\uff0c\u63a8\u52a8\u4e86\u4e2d\u56fd\u827a\u672f\u7684\u53d1\u5c55\u3002\u4f8b\u5982\uff0c\u7985\u5b97\u7684\u5f71\u54cd\u53ef\u4ee5\u5728\u4e2d\u56fd\u5c71\u6c34\u753b\u4e2d\u611f\u53d7\u5230\uff0c\u5f3a\u8c03\u901a\u8fc7\u81ea\u7136\u666f\u89c2\u6765\u4f20\u8fbe\u4e00\u79cd\u5fc3\u7075\u7684\u5b81\u9759\u4e0e\u81ea\u7531\u3002</p> </li> <li> <p>\u5bb6\u65cf\u89c2\u5ff5\u4e0e\u96c6\u4f53\u4e3b\u4e49\uff1a\u4e2d\u56fd\u6587\u5316\u4e2d\u5bb6\u5ead\u4e0e\u5bb6\u65cf\u7684\u89c2\u5ff5\u6839\u6df1\u8482\u56fa\uff0c\u5bb6\u65cf\u8d23\u4efb\u548c\u96c6\u4f53\u5229\u76ca\u5f80\u5f80\u9ad8\u4e8e\u4e2a\u4eba\u5229\u76ca\u3002\u5b5d\u9053\u3001\u5bb6\u5ead\u56e2\u7ed3\u3001\u4ee3\u9645\u4f20\u627f\u5728\u4e2d\u56fd\u6587\u5316\u4e2d\u5360\u636e\u91cd\u8981\u5730\u4f4d\u3002</p> </li> <li> <p>\u4e2d\u5eb8\u4e4b\u9053\uff1a\u4e2d\u56fd\u6587\u5316\u8ffd\u6c42\u5e73\u8861\u548c\u548c\u8c10\uff0c\u5021\u5bfc\u4e2d\u5eb8\uff0c\u5373\u907f\u514d\u6781\u7aef\uff0c\u627e\u5230\u4e8b\u7269\u7684\u6700\u4f73\u5e73\u8861\u70b9\u3002\u8fd9\u79cd\u601d\u60f3\u6e17\u900f\u5728\u4e2a\u4eba\u4fee\u517b\u3001\u653f\u6cbb\u7ba1\u7406\u548c\u65e5\u5e38\u751f\u6d3b\u4e2d\u3002</p> </li> <li> <p>\u9002\u5ea6\u4e0e\u5e73\u8861\uff1a\u4e2d\u5eb8\u4e4b\u9053\u5f3a\u8c03\u5728\u4e00\u5207\u4e8b\u52a1\u4e2d\u90fd\u5e94\u628a\u63e1\u201c\u9002\u5ea6\u201d\u7684\u539f\u5219\uff0c\u907f\u514d\u8fc7\u5ea6\u6216\u4e0d\u8db3\u3002\u4f8b\u5982\uff0c\u5728\u5f85\u4eba\u63a5\u7269\u3001\u5904\u7406\u4e8b\u52a1\u65f6\uff0c\u4e0d\u5e94\u8fc7\u4e8e\u4e25\u82db\u6216\u8fc7\u4e8e\u5bbd\u677e\uff0c\u800c\u8981\u6070\u5230\u597d\u5904\u3002</p> <p>\u548c\u8c10\u4e0e\u7edf\u4e00\uff1a\u4e2d\u5eb8\u8ffd\u6c42\u7684\u662f\u4e00\u79cd\u5185\u5916\u4e00\u81f4\u7684\u548c\u8c10\u72b6\u6001\u3002\u8fd9\u79cd\u548c\u8c10\u4e0d\u4ec5\u662f\u4e2a\u4eba\u5fc3\u6001\u4e0a\u7684\u5e73\u548c\uff0c\u4e5f\u4f53\u73b0\u5728\u4eba\u9645\u5173\u7cfb\u3001\u793e\u4f1a\u79e9\u5e8f\u548c\u653f\u6cbb\u6cbb\u7406\u7684\u5e73\u8861\u4e4b\u4e2d\u3002</p> <p>\u81ea\u6211\u4fee\u517b\uff1a\u4e2d\u5eb8\u4e4b\u9053\u7684\u5b9e\u65bd\u9996\u5148\u4f9d\u8d56\u4e8e\u4e2a\u4eba\u7684\u81ea\u6211\u4fee\u517b\uff0c\u8981\u6c42\u4e2a\u4eba\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\u4fdd\u6301\u7406\u6027\uff0c\u8c03\u8282\u81ea\u5df1\u7684\u60c5\u7eea\u548c\u6b32\u671b\uff0c\u505a\u5230\u201c\u559c\u6012\u54c0\u4e50\u4e4b\u672a\u53d1\u8c13\u4e4b\u4e2d\uff0c\u53d1\u800c\u7686\u4e2d\u8282\u8c13\u4e4b\u548c\u201d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u60c5\u7eea\u6ca1\u6709\u8868\u9732\u65f6\u4fdd\u6301\u5e73\u548c\uff0c\u5f53\u60c5\u7eea\u8868\u8fbe\u65f6\u4ecd\u7b26\u5408\u9002\u5ea6\u7684\u6807\u51c6\u3002</p> </li> <li> <p>\u6587\u5316\u4f20\u627f\u4e0e\u5386\u53f2\u610f\u8bc6\uff1a\u4e2d\u56fd\u6587\u5316\u9ad8\u5ea6\u91cd\u89c6\u5386\u53f2\uff0c\u6ce8\u91cd\u4ece\u5386\u53f2\u7ecf\u9a8c\u4e2d\u6c72\u53d6\u667a\u6167\u3002\u4e94\u5343\u5e74\u6587\u660e\u7684\u5ef6\u7eed\u4f7f\u5f97\u5386\u53f2\u611f\u548c\u6587\u5316\u4f20\u627f\u6210\u4e3a\u4e2d\u56fd\u4eba\u601d\u7ef4\u7684\u4e00\u90e8\u5206\u3002</p> </li> <li> </li> </ol> <p>\u8fd9\u4e9b\u8981\u7d20\u5171\u540c\u6784\u6210\u4e86\u4e2d\u56fd\u6587\u5316\u7684\u6838\u5fc3\uff0c\u8d2f\u7a7f\u4e8e\u54f2\u5b66\u3001\u5b97\u6559\u3001\u5bb6\u5ead\u89c2\u5ff5\u3001\u793e\u4f1a\u7ed3\u6784\u7b49\u65b9\u65b9\u9762\u9762\uff0c\u4f7f\u4e2d\u56fd\u6587\u5316\u72ec\u5177\u7279\u8272\u3002</p>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%B8%80%E8%8A%82/#_4","title":"\u4e00\u3001\u6587\u5316\u4f20\u627f\u7684\u5b9a\u4e49\u4e0e\u5185\u6db5","text":"<p>\u6587\u5316\u4f20\u627f\u662f\u6307\u6587\u5316\u5728\u4e00\u4e2a\u6c11\u65cf\u6216\u793e\u4f1a\u6210\u5458\u4e2d\u4f5c\u63a5\u529b\u68d2\u4f3c\u7684\u7eb5\u5411\u4ea4\u63a5\u7684\u8fc7\u7a0b\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u56e0\u53d7\u751f\u5b58\u73af\u5883\u548c\u6587\u5316\u80cc\u666f\u7684\u5236\u7ea6\u800c\u5177\u6709\u5f3a\u5236\u6027\u548c\u6a21\u5f0f\u5316\u8981\u6c42\uff0c\u6700\u7ec8\u5f62\u6210\u6587\u5316\u7684\u4f20\u627f\u673a\u5236\uff0c\u4f7f\u4eba\u7c7b\u6587\u5316\u5728\u5386\u53f2\u53d1\u5c55\u4e2d\u5177\u6709\u7a33\u5b9a\u6027\u3001\u5b8c\u6574\u6027\u3001\u5ef6\u7eed\u6027\u7b49\u7279\u5f81\u3002\u4e2d\u534e\u6587\u5316\u4f20\u627f\u4e0d\u4ec5\u4ec5\u662f\u5bf9\u8fc7\u53bb\u6587\u5316\u7684\u7b80\u5355\u590d\u5236\uff0c\u66f4\u662f\u5728\u65b0\u65f6\u4ee3\u80cc\u666f\u4e0b\u5bf9\u4f20\u7edf\u6587\u5316\u7684\u521b\u9020\u6027\u8f6c\u5316\u548c\u521b\u65b0\u6027\u53d1\u5c55\u3002</p> <p>### \u4e8c\u3001\u6587\u5316\u4f20\u627f\u7684\u4e3b\u8981\u5185\u5bb9</p> <p>\u4e2d\u56fd\u6587\u5316\u4f20\u627f\u7684\u5185\u5bb9\u6781\u4e3a\u4e30\u5bcc\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a</p> <ol> <li>\u8bf8\u5b50\u767e\u5bb6\uff1a\u5305\u62ec\u5112\u5bb6\u3001\u9053\u5bb6\u3001\u58a8\u5bb6\u3001\u6cd5\u5bb6\u7b49\uff0c\u4ed6\u4eec\u7684\u601d\u60f3\u6784\u6210\u4e86\u4e2d\u56fd\u4f20\u7edf\u6587\u5316\u7684\u57fa\u77f3\u3002</li> <li>\u4f20\u7edf\u8282\u65e5\uff1a\u5982\u6625\u8282\u3001\u7aef\u5348\u8282\u3001\u4e2d\u79cb\u8282\u7b49\uff0c\u8fd9\u4e9b\u8282\u65e5\u4e0d\u4ec5\u627f\u8f7d\u7740\u4e30\u5bcc\u7684\u6587\u5316\u5185\u6db5\uff0c\u4e5f\u662f\u4e2d\u534e\u6c11\u65cf\u60c5\u611f\u8868\u8fbe\u7684\u91cd\u8981\u8f7d\u4f53\u3002</li> <li>\u8bd7\u8bcd\u6b4c\u8d4b\uff1a\u5982\u300a\u8bd7\u7ecf\u300b\u3001\u300a\u695a\u8f9e\u300b\u3001\u300a\u5510\u8bd7\u5b8b\u8bcd\u300b\u7b49\uff0c\u8fd9\u4e9b\u6587\u5b66\u4f5c\u54c1\u662f\u4e2d\u56fd\u53e4\u4ee3\u6587\u5b66\u827a\u672f\u7684\u7470\u5b9d\uff0c\u5c55\u73b0\u4e86\u4e2d\u534e\u6c11\u65cf\u7684\u827a\u672f\u6210\u5c31\u3002</li> <li>\u4e2d\u56fd\u5efa\u7b51\uff1a\u5982\u957f\u57ce\u3001\u6545\u5bab\u3001\u9890\u548c\u56ed\u7b49\uff0c\u8fd9\u4e9b\u5efa\u7b51\u4e0d\u4ec5\u662f\u4e2d\u56fd\u53e4\u4ee3\u5efa\u7b51\u827a\u672f\u7684\u6770\u51fa\u4ee3\u8868\uff0c\u4e5f\u662f\u4e2d\u534e\u6587\u5316\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002</li> <li>\u4f20\u7edf\u4e2d\u533b\uff1a\u5982\u300a\u672c\u8349\u7eb2\u76ee\u300b\u7b49\u533b\u5b66\u5178\u7c4d\uff0c\u4ee5\u53ca\u9488\u7078\u3001\u63a8\u62ff\u7b49\u533b\u7597\u6280\u672f\uff0c\u6784\u6210\u4e86\u4e2d\u56fd\u4f20\u7edf\u533b\u5b66\u7684\u72ec\u7279\u4f53\u7cfb\u3002</li> <li>\u5b97\u6559\u54f2\u5b66\uff1a\u5305\u62ec\u9053\u6559\u3001\u4f5b\u6559\u7b49\u5b97\u6559\u601d\u60f3\uff0c\u4ee5\u53ca\u9634\u9633\u4e94\u884c\u7b49\u54f2\u5b66\u89c2\u5ff5\uff0c\u5bf9\u4e2d\u56fd\u4eba\u7684\u4e16\u754c\u89c2\u3001\u4eba\u751f\u89c2\u3001\u4ef7\u503c\u89c2\u4ea7\u751f\u4e86\u6df1\u8fdc\u5f71\u54cd\u3002</li> <li>\u6c11\u95f4\u5de5\u827a\uff1a\u5982\u526a\u7eb8\u3001\u523a\u7ee3\u3001\u9676\u74f7\u7b49\uff0c\u8fd9\u4e9b\u6c11\u95f4\u5de5\u827a\u4e0d\u4ec5\u5177\u6709\u827a\u672f\u4ef7\u503c\uff0c\u4e5f\u662f\u4e2d\u534e\u6c11\u65cf\u521b\u9020\u529b\u7684\u4f53\u73b0\u3002</li> <li>\u4e2d\u534e\u6b66\u672f\uff1a\u5982\u592a\u6781\u62f3\u3001\u5c11\u6797\u62f3\u7b49\uff0c\u8fd9\u4e9b\u6b66\u672f\u6d41\u6d3e\u4e0d\u4ec5\u5177\u6709\u5f3a\u8eab\u5065\u4f53\u7684\u4f5c\u7528\uff0c\u4e5f\u8574\u542b\u7740\u6df1\u539a\u7684\u6587\u5316\u5185\u6db5\u548c\u54f2\u5b66\u601d\u60f3\u3002</li> </ol> <p>### \u4e09\u3001\u6587\u5316\u4f20\u627f\u7684\u610f\u4e49</p> <ol> <li>\u7ef4\u7cfb\u4e2d\u534e\u6c11\u65cf\u5171\u540c\u751f\u6d3b\u7684\u7cbe\u795e\u7ebd\u5e26\uff1a\u4e2d\u534e\u6587\u5316\u4f20\u627f\u662f\u7ef4\u7cfb\u4e2d\u534e\u6c11\u65cf\u5171\u540c\u751f\u6d3b\u7684\u7cbe\u795e\u7ebd\u5e26\uff0c\u5b83\u4f7f\u4e0d\u540c\u5730\u57df\u3001\u4e0d\u540c\u6c11\u65cf\u7684\u4eba\u4eec\u5728\u5171\u540c\u7684\u6587\u5316\u80cc\u666f\u4e0b\u5f62\u6210\u5f3a\u70c8\u7684\u5f52\u5c5e\u611f\u548c\u8ba4\u540c\u611f\u3002</li> <li>\u4fc3\u8fdb\u56fd\u5bb6\u6587\u5316\u8ba4\u540c\u548c\u6587\u5316\u4ea4\u878d\uff1a\u901a\u8fc7\u6587\u5316\u4f20\u627f\uff0c\u4e0d\u540c\u6c11\u65cf\u7684\u6587\u5316\u5728\u4ea4\u6d41\u4e2d\u76f8\u4e92\u878d\u5408\uff0c\u5f62\u6210\u591a\u5143\u4e00\u4f53\u7684\u4e2d\u534e\u6587\u5316\u683c\u5c40\uff0c\u589e\u5f3a\u4e86\u56fd\u5bb6\u7684\u6587\u5316\u8ba4\u540c\u548c\u51dd\u805a\u529b\u3002</li> <li>\u4fdd\u6301\u4eba\u7c7b\u6587\u660e\u7684\u5584\u6027\u548c\u5ef6\u7eed\u6027\uff1a\u4f20\u7edf\u6587\u5316\u662f\u4eba\u7c7b\u6587\u660e\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u901a\u8fc7\u4f20\u627f\u4f20\u7edf\u6587\u5316\uff0c\u53ef\u4ee5\u4fdd\u6301\u4eba\u7c7b\u6587\u660e\u7684\u5584\u6027\u548c\u5ef6\u7eed\u6027\uff0c\u63a8\u52a8\u4eba\u7c7b\u6587\u660e\u6301\u7eed\u5411\u524d\u53d1\u5c55\u3002</li> </ol> <p>### \u56db\u3001\u6587\u5316\u4f20\u627f\u7684\u73b0\u72b6\u4e0e\u6311\u6218</p> <p>\u5f53\u524d\uff0c\u4e2d\u56fd\u6587\u5316\u4f20\u627f\u9762\u4e34\u7740\u8bf8\u591a\u6311\u6218\uff0c\u5982\u90e8\u5206\u4f20\u7edf\u6587\u5316\u9762\u4e34\u5931\u4f20\u7684\u98ce\u9669\u3001\u5916\u6765\u6587\u5316\u7684\u51b2\u51fb\u3001\u6587\u5316\u4f20\u627f\u4eba\u7684\u532e\u4e4f\u7b49\u3002\u4e3a\u4e86\u5e94\u5bf9\u8fd9\u4e9b\u6311\u6218\uff0c\u6211\u4eec\u9700\u8981\u91c7\u53d6\u4e00\u7cfb\u5217\u63aa\u65bd\uff0c\u5982\u52a0\u5f3a\u4f20\u7edf\u6587\u5316\u7684\u5ba3\u4f20\u548c\u6559\u80b2\u3001\u57f9\u517b\u6587\u5316\u4f20\u627f\u4eba\u3001\u63a8\u52a8\u4f20\u7edf\u6587\u5316\u7684\u521b\u9020\u6027\u8f6c\u5316\u548c\u521b\u65b0\u6027\u53d1\u5c55\u7b49\u3002</p> <p>\u603b\u4e4b\uff0c\u4e2d\u56fd\u6587\u5316\u4f20\u627f\u662f\u4e00\u4e2a\u590d\u6742\u800c\u957f\u671f\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u6211\u4eec\u6bcf\u4e00\u4e2a\u4eba\u7684\u5171\u540c\u52aa\u529b\u548c\u53c2\u4e0e\u3002\u53ea\u6709\u4e0d\u65ad\u6316\u6398\u548c\u4f20\u627f\u4e2d\u534e\u6587\u5316\u7684\u7cbe\u9ad3\uff0c\u624d\u80fd\u5728\u65b0\u65f6\u4ee3\u80cc\u666f\u4e0b\u8ba9\u4e2d\u534e\u6587\u5316\u7115\u53d1\u51fa\u65b0\u7684\u751f\u673a\u548c\u6d3b\u529b\u3002</p>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82/","title":"\u7b2c\u4e8c\u8282","text":""},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82/#_2","title":"\u6750\u6599\u5185\u5bb9\u57fa\u672c\u6982\u8ff0","text":""},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82/#1","title":"1. \u827e\u5c14\u66fc\uff1a\u300a\u8bba\u4e2d\u534e\u5e1d\u56fd\u665a\u671f\u79d1\u4e3e\u7684\u4e09\u91cd\u5c5e\u6027\uff1a\u653f\u6cbb\u3001\u793e\u4f1a\u548c\u6587\u5316\u518d\u751f\u4ea7\u300b","text":"<p>\u827e\u5c14\u66fc\u6559\u6388\u4ece\u653f\u6cbb\u3001\u793e\u4f1a\u3001\u6587\u5316\u4e09\u4e2a\u7ef4\u5ea6\u5206\u6790\u4e86\u79d1\u4e3e\u5236\u5ea6\u3002\u653f\u6cbb\u4e0a\uff0c\u79d1\u4e3e\u5236\u5ea6\u901a\u8fc7\u8003\u8bd5\u7b5b\u9009\u7edf\u6cbb\u7cbe\u82f1\uff0c\u7ef4\u62a4\u4e2d\u592e\u96c6\u6743\u7684\u7a33\u5b9a\uff1b\u793e\u4f1a\u4e0a\uff0c\u5b83\u4e3a\u5e95\u5c42\u793e\u4f1a\u63d0\u4f9b\u4e86\u5411\u4e0a\u6d41\u52a8\u7684\u673a\u4f1a\uff1b\u6587\u5316\u4e0a\uff0c\u79d1\u4e3e\u5236\u5ea6\u901a\u8fc7\u7ecf\u5178\u6559\u80b2\u548c\u8003\u8bd5\u6807\u51c6\uff0c\u7ef4\u6301\u4e86\u5112\u5bb6\u6587\u5316\u7684\u8fde\u7eed\u6027\u3002</p>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82/#2","title":"2. \u300a\u4e2d\u56fd\u5386\u53f2\u4e0a\u7684\u79d1\u4e3e\u3001\u8003\u636e\u4e0e\u79d1\u5b66\u2014\u2014\u8bbf\u7f8e\u56fd\u666e\u6797\u65af\u987f\u5927\u5b66\u827e\u5c14\u66fc\u6559\u6388\u300b","text":"<p>\u8fd9\u7bc7\u8bbf\u8c08\u4e2d\uff0c\u827e\u5c14\u66fc\u8ba8\u8bba\u4e86\u79d1\u4e3e\u5236\u5ea6\u5bf9\u4e2d\u56fd\u4f20\u7edf\u5b66\u672f\uff0c\u5c24\u5176\u662f\u8003\u636e\u5b66\u548c\u79d1\u5b66\u53d1\u5c55\u7684\u5f71\u54cd\u3002\u79d1\u4e3e\u8003\u8bd5\u63a8\u52a8\u4e86\u5112\u5bb6\u7ecf\u5178\u7684\u7814\u7a76\uff0c\u4f46\u4e5f\u9650\u5236\u4e86\u5b66\u672f\u7684\u591a\u6837\u6027\u548c\u521b\u65b0\uff0c\u56e0\u5176\u5185\u5bb9\u8fc7\u4e8e\u72ed\u7a84\uff0c\u504f\u91cd\u516b\u80a1\u6587\u5f0f\u7684\u5e94\u8bd5\u6a21\u5f0f\u3002</p>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82/#3","title":"3. \u5f6d\u5c0f\u745c\uff1a\u300a\u4e2d\u4e16\u7eaa\u6b27\u6d32\u5927\u5b66\u4e0e\u4e2d\u56fd\u79d1\u4e3e\u5236\u5ea6\u300b","text":"<p>\u5f6d\u5c0f\u745c\u6559\u6388\u5c06\u4e2d\u4e16\u7eaa\u6b27\u6d32\u5927\u5b66\u4e0e\u4e2d\u56fd\u79d1\u4e3e\u5236\u5ea6\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u6b27\u6d32\u5927\u5b66\u7684\u77e5\u8bc6\u4f53\u7cfb\u5f3a\u8c03\u81ea\u7531\u5b66\u79d1\u548c\u666e\u4e16\u77e5\u8bc6\uff0c\u800c\u4e2d\u56fd\u79d1\u4e3e\u5236\u5ea6\u4ee5\u5112\u5bb6\u7ecf\u5178\u4e3a\u6838\u5fc3\uff0c\u76ee\u6807\u662f\u57f9\u517b\u6cbb\u7406\u56fd\u5bb6\u7684\u884c\u653f\u5b98\u50da\u3002\u6b27\u6d32\u7684\u6559\u80b2\u7cfb\u7edf\u9f13\u52b1\u5b66\u672f\u81ea\u7531\uff0c\u63a8\u52a8\u4e86\u6587\u827a\u590d\u5174\u4e0e\u79d1\u5b66\u9769\u547d\uff0c\u800c\u79d1\u4e3e\u5236\u5ea6\u5219\u52a0\u5f3a\u4e86\u4e2d\u56fd\u4f20\u7edf\u6587\u5316\u7684\u5ef6\u7eed\u4e0e\u653f\u6cbb\u7a33\u5b9a\u3002</p>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82/#4","title":"4. \u674e\u5f18\u797a\uff1a\u300a\u4e2d\u56fd\u79d1\u4e3e\u5236\u5ea6\u7684\u5386\u53f2\u610f\u4e49\u53ca\u89e3\u91ca\u2014\u2014\u4ece\u827e\u5c14\u66fc\u5bf9\u660e\u6e05\u8003\u8bd5\u5236\u5ea6\u7684\u7814\u7a76\u8c08\u8d77\u300b","text":"<p>\u674e\u5f18\u797a\u603b\u7ed3\u4e86\u827e\u5c14\u66fc\u5bf9\u79d1\u4e3e\u5236\u5ea6\u7684\u7814\u7a76\uff0c\u6307\u51fa\u5176\u5728\u660e\u6e05\u4e24\u4ee3\u7684\u5386\u53f2\u610f\u4e49\u3002\u79d1\u4e3e\u5236\u5ea6\u4e0d\u4ec5\u662f\u4e00\u79cd\u5b98\u50da\u9009\u62d4\u673a\u5236\uff0c\u4e5f\u662f\u4e00\u79cd\u6587\u5316\u518d\u751f\u4ea7\u7684\u5de5\u5177\uff0c\u786e\u4fdd\u4e86\u4e2d\u56fd\u4f20\u7edf\u6587\u5316\u548c\u7edf\u6cbb\u79e9\u5e8f\u7684\u5ef6\u7eed\u3002</p>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82/#5","title":"5. \u674e\u5f18\u797a\uff1a\u300a\u4e2d\u56fd\u4f20\u7edf\u6559\u80b2\u7684\u7279\u8272\u4e0e\u53cd\u7701\u300b","text":"<p>\u8fd9\u7bc7\u6587\u7ae0\u63a2\u8ba8\u4e86\u4e2d\u56fd\u4f20\u7edf\u6559\u80b2\u7684\u7279\u8272\uff0c\u5305\u62ec\u91cd\u89c6\u7ecf\u5178\u3001\u5f3a\u8c03\u6574\u9f50\u5212\u4e00\u7684\u6559\u80b2\u6807\u51c6\uff0c\u4ee5\u53ca\u5bf9\u5b66\u672f\u81ea\u7531\u7684\u9650\u5236\u3002\u6587\u7ae0\u5bf9\u8fd9\u79cd\u4f20\u7edf\u6559\u80b2\u8fdb\u884c\u4e86\u53cd\u601d\uff0c\u8ba4\u4e3a\u5b83\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u675f\u7f1a\u4e86\u601d\u60f3\u81ea\u7531\u4e0e\u5b66\u672f\u521b\u65b0\u3002</p>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82/#6","title":"6. \u674e\u5f18\u797a\uff1a\u300a\u4e2d\u56fd\u79d1\u4e3e\u8003\u8bd5\u53ca\u5176\u8fd1\u4ee3\u89e3\u91ca\u4e94\u8bba\u300b","text":"<p>\u674e\u5f18\u797a\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4ece\u4e94\u4e2a\u65b9\u9762\u89e3\u91ca\u4e86\u4e2d\u56fd\u79d1\u4e3e\u5236\u5ea6\u7684\u7279\u70b9\u53ca\u5176\u5728\u8fd1\u4ee3\u7684\u5f71\u54cd\u3002\u4ed6\u63a2\u8ba8\u4e86\u79d1\u4e3e\u5236\u5ea6\u5982\u4f55\u5728\u8fd1\u4ee3\u9762\u4e34\u6311\u6218\uff0c\u5e76\u4e0e\u897f\u65b9\u6559\u80b2\u4f53\u7cfb\u4ea7\u751f\u5bf9\u6bd4\u3002</p>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82/#_3","title":"\u95ee\u9898\u56de\u7b54","text":""},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82/#1_1","title":"1.\u79d1\u4e3e\u5236\u6709\u54ea\u4e9b\u529f\u80fd\u53ca\u5176\u5229\u5f0a\uff1f","text":"<p>\u529f\u80fd\uff1a</p> <ul> <li>\u653f\u6cbb\u529f\u80fd\uff1a\u79d1\u4e3e\u5236\u5ea6\u662f\u9009\u62d4\u5b98\u50da\u7684\u4e3b\u8981\u9014\u5f84\uff0c\u4fdd\u8bc1\u4e86\u4e2d\u592e\u96c6\u6743\u7684\u6709\u6548\u8fd0\u4f5c\u3002</li> <li>\u793e\u4f1a\u529f\u80fd\uff1a\u63d0\u4f9b\u4e86\u4e00\u79cd\u76f8\u5bf9\u516c\u5e73\u7684\u793e\u4f1a\u6d41\u52a8\u6e20\u9053\uff0c\u8ba9\u793e\u4f1a\u5404\u9636\u5c42\u7684\u58eb\u5b50\u6709\u673a\u4f1a\u901a\u8fc7\u8003\u8bd5\u8fdb\u5165\u4e0a\u5c42\u9636\u7ea7\u3002</li> <li>\u6587\u5316\u529f\u80fd\uff1a\u901a\u8fc7\u6559\u80b2\u548c\u8003\u8bd5\uff0c\u7ef4\u62a4\u4e86\u5112\u5bb6\u6587\u5316\u7684\u6b63\u7edf\u6027\u548c\u8fde\u7eed\u6027\uff0c\u786e\u4fdd\u4e86\u56fd\u5bb6\u7684\u6587\u5316\u7edf\u4e00\u3002</li> </ul> <p>\u5229\u5f0a\uff1a</p> <ul> <li>\u4f18\u70b9\uff1a\u79d1\u4e3e\u5236\u5ea6\u4e3a\u793e\u4f1a\u7cbe\u82f1\u7684\u9009\u62d4\u63d0\u4f9b\u4e86\u76f8\u5bf9\u516c\u5e73\u7684\u7ade\u4e89\u673a\u5236\uff0c\u6253\u7834\u4e86\u4e16\u88ad\u8d35\u65cf\u5bf9\u653f\u6cbb\u6743\u529b\u7684\u5784\u65ad\uff1b\u4fc3\u8fdb\u4e86\u5112\u5bb6\u6587\u5316\u7684\u5e7f\u6cdb\u4f20\u64ad\u548c\u7ef4\u62a4\u3002</li> <li>\u7f3a\u70b9\uff1a\u5e94\u8bd5\u5185\u5bb9\u8fc7\u4e8e\u5355\u4e00\uff0c\u5bfc\u81f4\u5b66\u672f\u521b\u65b0\u53d7\u9650\uff1b\u8fc7\u5ea6\u5f3a\u8c03\u6b7b\u8bb0\u786c\u80cc\u548c\u516b\u80a1\u6587\uff0c\u6291\u5236\u4e86\u521b\u9020\u6027\u601d\u7ef4\u548c\u5e7f\u6cdb\u7684\u77e5\u8bc6\u63a2\u7d22\u3002</li> </ul>"},{"location":"blog/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E4%B8%8E%E4%BC%A0%E6%89%BF/%E8%AE%A8%E8%AE%BA%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82/#2_1","title":"2. \u4e2d\u56fd\u6559\u80b2\u4f20\u7edf\u7684\u7279\u70b9\u6709\u54ea\u4e9b\uff1f","text":"<ul> <li>\u91cd\u89c6\u7ecf\u5178\u6559\u80b2\uff1a\u4ee5\u5112\u5bb6\u7ecf\u5178\u4e3a\u57fa\u7840\uff0c\u6559\u80b2\u5185\u5bb9\u5177\u6709\u9ad8\u5ea6\u7684\u7edf\u4e00\u6027\u548c\u6743\u5a01\u6027\u3002</li> <li>\u8003\u8bd5\u5bfc\u5411\u6027\u5f3a\uff1a\u79d1\u4e3e\u5236\u5ea6\u5c06\u6559\u80b2\u7684\u6700\u7ec8\u76ee\u6807\u5b9a\u4e3a\u901a\u8fc7\u8003\u8bd5\uff0c\u5bfc\u81f4\u6559\u80b2\u8fc7\u4e8e\u5b9e\u7528\uff0c\u5ffd\u89c6\u4e86\u4e2a\u6027\u5316\u548c\u591a\u5143\u5316\u7684\u53d1\u5c55\u3002</li> <li>\u6587\u5316\u4f20\u627f\u529f\u80fd\uff1a\u6559\u80b2\u4e0d\u4ec5\u662f\u77e5\u8bc6\u7684\u4f20\u6388\uff0c\u8fd8\u662f\u6587\u5316\u7684\u5ef6\u7eed\uff0c\u7ef4\u7cfb\u4e86\u56fd\u5bb6\u7684\u6587\u5316\u7edf\u4e00\u6027\u3002</li> <li>\u601d\u60f3\u81ea\u7531\u7684\u9650\u5236\uff1a\u4f20\u7edf\u6559\u80b2\u504f\u5411\u4e8e\u7ef4\u62a4\u7edf\u6cbb\u79e9\u5e8f\uff0c\u601d\u60f3\u521b\u65b0\u548c\u81ea\u7531\u63a2\u7d22\u5e38\u5e38\u53d7\u5230\u6291\u5236\u3002</li> </ul>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/","title":"\u5927\u5b66\u7269\u7406\u4e592","text":""},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/","title":"\u7b80\u4ecb","text":""},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_1","title":"\u7b80\u4ecb","text":""},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_2","title":"\u9009\u8bfe\u4fe1\u606f","text":"<p>\u603b\u517114\u4e2a\u5b9e\u9a8c</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_3","title":"\u5b9e\u9a8c\u62a5\u544a\u9884\u4e60","text":"<p>\u5b9e\u9a8c\u76ee\u7684</p> <p>\u5b9e\u9a8c\u539f\u7406\uff1appt\u3001\u6559\u6750\u4e0a\uff0c\u5217\u51fa\u7269\u7406\u516c\u5f0f\u5e76\u63a8\u5012\u3001\u5217\u51fa\u5404\u4e2a\u7b26\u53f7\u7684\u610f\u4e49</p> <p>\u5b9e\u9a8c\u5185\u5bb9\uff1a2~3\u70b9</p> <p>\u5b9e\u9a8c\u5668\u6750\uff1a\u5668\u6750\u578b\u53f7\u4ee5\u53ca\u6ce8\u610f\u5b9e\u9a8c</p> <p>\u6570\u636e\u8bb0\u5f55\u7684\u8349\u8868\uff1a\u6700\u540e\u4e00\u9875\uff0c\u5217\u8868\u683c</p> <p>\u4e00\u6b21\u5b9e\u9a8c20\u5206</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_4","title":"\u5b9e\u9a8c\u8fc7\u7a0b","text":"<p>30\u5206\uff0c\u64cd\u4f5c\u4eea\u5668\uff0c\u653e\u6574\u9f50</p> <p>\u4eea\u5668\u635f\u574f\uff1a\u6ca1\u5206+\u8d54\u507f\u2018</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_5","title":"\u5b9e\u9a8c\u62a5\u544a","text":"<p>\u5b9e\u9a8c\u6570\u636e\u7684\u5904\u7406\u4e0e\u8868\u8fbe</p> <p>\u5b9e\u9a8c\u5fc3\u5f97\u4e0e\u601d\u8003\u9898\uff0c\u81f3\u5c11\u4e00\u4e2a\u601d\u8003\u9898</p> <p>\u62a5\u544a\u5185\u5bb9\u4f7f\u7528\u6c34\u7b14\uff0c\u4e0d\u80fd\u7528\u94c5\u7b14\uff1b\u4f5c\u56fe\u4f7f\u7528\u5750\u6807\u7eb8+\u94c5\u7b14\u6216\u8005\u4f7f\u7528\u8f6f\u4ef6\u4f5c\u56fe\u6253\u5370\uff0c\u5e76\u8981\u5217\u51fa\u76f8\u5e94\u7684\u5b9e\u9a8c\u6570\u636e</p> <p>\u4e0a\u4ea4\u540e\u4e0d\u53d1\u653e</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_6","title":"\u5b9e\u9a8c\u5b89\u5168","text":""},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_7","title":"\u5b9e\u9a8c\u8bfe\u5b88\u5219","text":"<p>\u8fdb\u5165\u5b9e\u9a8c\u5ba4\u5bf9\u53f7\u5165\u5ea7</p> <p>\u5b9e\u9a8c\u62a5\u544a\u5728\u4e0b\u6b21\u4e0a\u8bfe\u524d\u4e0a\u4ea4</p> <p>\u8865\u505a\u5b9e\u9a8c\u62a5\u544a\u63d0\u4ea4\u65f6\u95f4\uff1a\u671f\u672b\u8003\u8bd5\u524d\u548c\u5b9e\u9a8c\u8bfe\u540e\u4e00\u5468</p> <p>\u539f\u59cb\u6570\u636e\u8981\u6709\u8001\u5e08\u7684\u7b7e\u5b57</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_8","title":"\u8003\u52e4","text":"<p>\u7ecf\u8fc7\u8001\u5e08\u7b7e\u540d\u540e\u624d\u53ef\u4ee5\u79bb\u5f00\u5b9e\u9a8c\u5ba4</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_9","title":"\u5b9e\u9a8c\u8bfe\u8981\u6c42","text":"<p>\u62a5\u544a\u8fdf\u4ea4\u4e00\u5468\u5f53\u6b21\u62635\u5206\uff0c\u8fdf\u4ea4\u4e24\u5468\u626310\u5206</p> <p>\u5b9e\u9a8c\u5b8c\u6210\u540e\u8981\u5728\u4e09\u5929\u5185\u5b8c\u6210\u5b9e\u9a8c\u6559\u5b66\u8bc4\u4ef7</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_10","title":"\u9009\u8bfe\u65f6\u95f4","text":""},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_11","title":"\u7eea\u8bba\u8bfe\u5f53\u5929","text":"<p>\u5b9e\u9a8c\u5b89\u5168\u6d4b\u8bd5\uff0c\u8fbe\u523090\u5206\u4ee5\u4e0a\u901a\u8fc7</p> <p>\u767b\u5f55\u9009\u8bfe\u7cfb\u7edf\u3001\u9009\u62e9\u5b9e\u9a8c\u3001\u5b89\u6392\u8bfe\u8868</p> <p>\u5f00\u5b66\u4e4b\u540e3\u5468\u4ee5\u5185\u53ef\u4ee5\u9009\u8bfe\uff0c\u5982\u9700\u8c03\u6574\u8054\u7cfb\u8001\u5e08</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/#_12","title":"\u4ea4\u62a5\u544a\u7bb1","text":"<p>\u4fe1\u7bb1\u5728\u5927\u5385\u5de6\u4fa7\uff0c\u4e0d\u8981\u4ea4\u9519\u4e86</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/","title":"\u7eea\u8bba","text":""},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/#_1","title":"\u7eea\u8bba","text":""},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/#_2","title":"\u5b9e\u9a8c\u6d4b\u91cf\u548c\u6709\u6548\u6570\u5b57","text":""},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/#_3","title":"\u6709\u6548\u4f4d\u6570","text":"<ul> <li>\u53ef\u9760\u6570\u5b57\uff1a\u76f4\u8bfb</li> <li>\u5b58\u7591\u6570\u5b57\uff1a\u4f30\u8bfb</li> </ul> <p>\u6709\u6548\u4f4d\u6570=\u53ef\u9760\u6570\u5b57\u7684\u4f4d\u6570+1\uff08\u4f30\u8bfb\u4f4d\u6570\uff09</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/#_4","title":"\u8bef\u5dee","text":"<p>\u8bef\u5dee=\u6d4b\u91cf\u503c-\u771f\u5b9e\u503c</p> <p>\u76f8\u5bf9\u8bef\u5dee\uff08\u767e\u5206\u8bef\u5dee\uff09\uff1aE=|\u6d4b\u91cf\u503c-\u771f\u5b9e\u503c|/\u771f\u5b9e\u503c*100%</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/#_5","title":"\u8bef\u5dee\u5206\u7c7b","text":"<p>\u7cfb\u7edf\u8bef\u5dee\u3001\u76f8\u5bf9\u8bef\u5dee</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/#_6","title":"\u8bef\u5dee\u5206\u5e03","text":"<p>\u6b63\u592a\u5206\u5e03\u3001\u5747\u5300\u5206\u5e03</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/#_7","title":"\u4e0d\u786e\u5b9a\u5ea6","text":"<p>A\u7c7b\u3001B\u7c7b</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/#_8","title":"\u6709\u6548\u6570\u5b57\u4e0e\u5b9e\u9a8c\u6570\u636e\u5904\u7406","text":""},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/#_9","title":"\u4fee\u7ea6","text":""},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/#_10","title":"\u4fee\u7ea6\u89c4\u5219","text":"<p>\u56db\u820d\u516d\u5165\u4e94\u5355\u53cc\uff1a5\u7684\u65f6\u5019\uff0c\u820d\u53bb\u540e\u4f7f\u5f97\u6700\u540e\u4e00\u4f4d\u662f\u5076\u6570</p>"},{"location":"blog/%E5%A4%A7%E7%89%A9%E4%B9%992/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/%E7%BB%AA%E8%AE%BA/#_11","title":"\u5355\u4f4d\u6362\u7b97","text":"<p>\u6362\u7b97\u540e\u5e94\u8be5\u4fdd\u6301\u6709\u6548\u6570\u5b57\u4f4d\u6570\u4e0d\u53d8</p>"},{"location":"blog/%E5%B0%9D%E8%AF%95/test1/","title":"\u8fd9\u662f\u4e00\u4e2a\u5c1d\u8bd5\u7684\u4f8b\u5b50","text":""},{"location":"blog/%E5%B0%9D%E8%AF%95/test1/#_2","title":"\u4ee3\u7801\u5757\u5c1d\u8bd5","text":"C<pre><code>#include&lt;stdio.h&gt;\nint main(){\n    printf(\"2313\");\n}\n</code></pre>"},{"location":"blog/%E5%B0%9D%E8%AF%95/test1/#_3","title":"\u56fe\u7247\u5c1d\u8bd5","text":"<p>\u63a5\u4e0b\u6765\u5c1d\u8bd5\u56fe\u7247</p> <p></p>"},{"location":"blog/%E5%B0%9D%E8%AF%95/test1/#latex","title":"LaTex \u5c1d\u8bd5","text":"\\[ f(x)=\\alpha \\times b \\]"},{"location":"blog/%E5%B0%9D%E8%AF%95/test1/#_4","title":"\u5c1d\u8bd5\u4e00\u4e0b","text":""},{"location":"blog/%E6%A6%82%E7%BB%9F/","title":"\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1","text":""},{"location":"blog/%E6%A6%82%E7%BB%9F/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.1%20%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/","title":"\u968f\u673a\u4e8b\u4ef6\u53ca\u5176\u8fd0\u7b97","text":""},{"location":"blog/%E6%A6%82%E7%BB%9F/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.1%20%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/#_2","title":"\u968f\u673a\u73b0\u8c61","text":"\u968f\u673a\u73b0\u8c61 \\(N_{\u7ed3\u679c} \\geq 2\\) \u786e\u5b9a\u6027\u73b0\u8c61 \\(N_{\u7ed3\u679c} = 2\\)"},{"location":"blog/%E6%A6%82%E7%BB%9F/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.1%20%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/#_3","title":"\u968f\u673a\u8bd5\u9a8c","text":"<p>\u5728\u76f8\u540c\u6761\u4ef6\u4e0b\u53ef\u4ee5\u91cd\u590d\u7684\u968f\u673a\u73b0\u8c61\u7684\u89c2\u5bdf\u3001\u8bb0\u5f55\u3001\u5b9e\u9a8c</p>"},{"location":"blog/%E6%A6%82%E7%BB%9F/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.1%20%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/#_4","title":"\u6837\u672c\u7a7a\u95f4","text":"<p>\\(\\Omega=\\{\\omega\\}\\)\uff0c\u5176\u4e2d\\(\\omega\\)\u8868\u793a\u57fa\u672c\u7ed3\u679c\uff0c\u53c8\u79f0\u4e3a\u6837\u672c\u70b9</p> <p>Example:</p> <ul> <li>\u629b\u786c\u5e01\uff1a\\(\\Omega_1=\\{\\omega_1 , \\omega_2 \\}\\)\uff0c\u5176\u4e2d\\(\\omega_1\\)\u8868\u793a\u6b63\u9762\u671d\u4e0a\uff0c\\(\\omega_2\\)\u8868\u793a\u53cd\u9762\u671d\u4e0a</li> <li></li> </ul>"},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/","title":"\u7b2c\u4e00\u8282\u8bfe","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/#_2","title":"\u6587\u5316\u7684\u6c34\u7a3b\u7406\u8bba","text":"<ul> <li>\u6c34\u7a3b\u7684\u79cd\u690d\u5f71\u54cd\u4e86\u5b97\u65cf\u4e0e\u5bb6\u65cf\u7684\u7e41\u8363</li> </ul>"},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/#_3","title":"\u5730\u7406\u73af\u5883\u51b3\u5b9a\u8bba","text":"<ul> <li>\u5973\u6027\u6000\u5b55\uff1a\u75c5\u539f\u4f53\u7406\u8bba\uff0c\u5973\u6027\u53d7\u7cbe\u7740\u5e8a\uff0c\u51fa\u73b0\u6392\u5f02\u53cd\u5e94\uff0c\u514d\u75ab\u7cfb\u7edf\u96ea\u843d</li> </ul>"},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/#_4","title":"\u793e\u4f1a\u9636\u5c42","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/#_5","title":"\u7ec4\u7ec7\u548c\u5236\u5ea6","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/#_6","title":"\u793e\u4f1a\u89c4\u8303","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/#_7","title":"\u4ef7\u503c\u89c2\u548c\u9053\u5fb7","text":"<p>Ex</p> <p>\u5403\u72d7\u8089\u53d8\u5f97\u9053\u5fb7\u5316\uff0c\u6027\u53d8\u5f97\u53bb\u9053\u5fb7\u5316</p>"},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/#_8","title":"\u793e\u4f1a\u6587\u5316","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/","title":"\u8bba\u6587\u5199\u4f5c\u6307\u5bfc","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_2","title":"\u6743\u5a01\u6807\u51c6","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_3","title":"\u5b66\u672f\u5199\u4f5c\u89c4\u8303","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_4","title":"\u5fc3\u7406\u5b66\u8bba\u6587\u5199\u4f5c\u4e3b\u8981\u5f62\u5f0f","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_5","title":"\u5b9e\u8bc1\u7814\u7a76\u62a5\u544a","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_6","title":"\u6587\u732e\u7efc\u8ff0","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_7","title":"\u7406\u8bba\u6027\u8bba\u6587","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_8","title":"\u65b9\u6cd5\u5b66\u8bba\u6587","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_9","title":"\u5199\u4f5c\u524d\u671f\u5de5\u4f5c","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_10","title":"\u6587\u732e\u68c0\u7d22\u65b9\u6cd5","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_11","title":"\u5fc3\u7406\u5b66\u6587\u732e\u641c\u7d22\u548c\u7ba1\u7406","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_12","title":"\u5fc3\u7406\u5b66\u6587\u732e\u9605\u8bfb","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_13","title":"\u52e4\u505a\u7b14\u8bb0","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_14","title":"\u5982\u4f55\u7565\u8bfb","text":""},{"location":"blog/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8C%87%E5%AF%BC/#_15","title":"\u7ed3\u6784","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/","title":"\u8ba1\u7b97\u673a\u7ec4\u6210","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/#content","title":"Content","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/first/","title":"Prelude","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#the-construct-of-cpu","title":"The construct of CPU","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#memory","title":"Memory","text":"<ul> <li>\u6613\u5931\u6027\u7684\u8bbf\u95ee\u5feb\uff0c\u975e\u6613\u5931\u6027\u8bbf\u95ee\u901f\u5ea6\u6162</li> </ul>"},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#instruction-set-architecture","title":"Instruction set architecture","text":"<ul> <li>\u8f6f\u4ef6\u548c\u786c\u4ef6\u7684\u63a5\u53e3\uff1a\u5173\u6ce8\u6307\u4ee4\u96c6</li> </ul>"},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#_1","title":"\u673a\u5668\u8bed\u8a00\u3001\u6c47\u7f16\u8bed\u8a00\u3001\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#technologies-for-building-processors-and-memory","title":"Technologies for Building Processors and Memory","text":"<p>\u96c6\u6210\u7535\u8def\u52a0\u5de5\u7ed5\u4e0d\u5f00\u7684\u4e00\u4e2a\u8bdd\u9898\u5c31\u662f\u7845\u6676\u52a0\u5de5\uff0c\u7845\u6676\u952d(silicon crystal ingot)\u4f1a\u88ab\u52a0\u5de5\u6210\u7845\u7247(silicon wafer)\uff0c\u7136\u540e\u518d\u8fdb\u884c\u52a0\u5de5\uff0c\u6700\u540e\u6210\u4e3a\u96c6\u6210\u7535\u8def\u3002\u4e00\u4e2a\u7845\u7247\u4f1a\u88ab\u5207\u6210\u5f88\u591a\u5c0f\u5757\uff0c\u5176\u4e2d\u96be\u514d\u6709\u4e00\u4e9b\u574f\u7684(defects)\uff0c\u800c\u90a3\u4e9b\u597d\u7684\u5c31\u88ab\u79f0\u4e3a dies\uff0c\u6216\u8005\u8bf4 chips\u3002\u800c\u8fd9\u4e2a\u5de5\u827a\u7684\u4ea7\u91cf\u5219\u7531\u4e0b\u9762\u8fd9\u4e2a\u516c\u5f0f\u5b9a\u4e49\uff1a</p> <p></p> <p>\u6700\u540e\u4e00\u4e2a\u5f0f\u5b50\u57fa\u4e8e\u7ecf\u9a8c\u89c2\u5bdf\u5f97\u5230\uff0c\u5176\u4e2d\u6307\u6570\u5b9e\u9645\u4e0a\u4e0e\u52a0\u5de5\u6b65\u9aa4\u6570\u91cf\u6709\u5173\u3002</p>"},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#response-time-and-throughput","title":"Response Time and Throughput","text":"<ul> <li>Rplacing the processor with a faster version -&gt; Response Time and Throughput</li> <li>Adding more processors -&gt; Throughput</li> </ul>"},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#relative-performance","title":"Relative Performance","text":"<p>\u8861\u91cf\u8ba1\u7b97\u673a\u7684\u6027\u80fd\u548c\u8868\u73b0\uff0c\u65e0\u8bba\u5bf9\u4e8e\u5de5\u7a0b\u5e08\u8fd8\u662f\u6d88\u8d39\u8005\u90fd\u662f\u4e00\u4e2a\u975e\u5e38\u5fc5\u8981\u7684\u9700\u6c42\u3002\u5176\u4e2d\u4e00\u4e2a\u91cd\u8981\u7684\u6807\u51c6\u5c31\u662f\u201c\u8fd0\u884c\u901f\u5ea6\u201d\uff0c\u5177\u4f53\u6765\u8bf4\uff1a</p> <ul> <li>Response Time / Execution Time \u4ece\u7a0b\u5e8f\u5f00\u59cb\u5230\u7ed3\u675f\u7684\u65f6\u95f4</li> <li>Throughput / Bandwidth \u5355\u4f4d\u65f6\u95f4\u5185\u5b8c\u6210\u7684\u4efb\u52a1\u6570\u91cf</li> </ul> <p>\u5e76\u4e14\u6211\u4eec\u8fd9\u6837\u8054\u7cfb performance \u548c execution time\uff1a $$ Performance_X=\\frac 1 {Execution \\; time_X} $$</p>"},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#cpu-time","title":"CPU Time","text":"<ul> <li>CPU (execution) time\uff08CPU \u6267\u884c\u65f6\u95f4\uff09</li> <li>CPU clock cycle\uff08\u65f6\u949f\u5468\u671f\u6570\uff09</li> <li>clock rate\uff08\u65f6\u949f\u9891\u7387\uff09 / clock cycle time\uff08\u65f6\u949f\u5468\u671f\uff09</li> </ul> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5173\u7cfb\u5f0f\uff1a $$ CPU \\; (ececution) \\; time=CPU \\; clock \\; cycles \\times Clock \\; cycle \\; time $$ \u4e5f\u5c31\u662f\u8bf4\uff0cCPU \u7684\u8fd0\u884c\u65f6\u95f4\u662f CPU \u65f6\u949f\u5468\u671f\u6570\u4e58\u4e0a\u65f6\u949f\u5468\u671f</p> <p>\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06 CPU \u7684\u65f6\u949f\u5468\u671f\u4ee5\u53ca\u65f6\u949f\u9891\u7387\u8fdb\u884c\u4e00\u4e2a\u8f6c\u6362 $$ CPU \\; (ececution) \\; time=\\frac {CPU \\; clock \\; cycles} {Clock \\; rate} $$</p>"},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#instruction-count-and-cpi","title":"Instruction Count and CPI","text":"<p>\u5728\u6bcf\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u4e2d\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a CPU \u7684\u6267\u884c\u5468\u671f\u6570\u91cf\u770b\u6210 CPU \u6267\u884c\u6307\u4ee4\u96c6\u7684\u8fc7\u7a0b\uff0c\u4e8e\u662f\uff0c\u6211\u4eec\u6709\u4e0b\u5217\u516c\u5f0f $$ CPU\\;clock\\;cycles=Instruction\\;count \\times cycles\\;per\\;instruction $$ \u5176\u4e2d\uff0ccycles per instruction \u53c8\u88ab\u79f0\u4e3a CPI\uff0c\u8fd9\u4e2a\u516c\u5f0f\u610f\u5473\u7740 CPU \u7684\u6267\u884c\u5468\u671f\u6570\u91cf\u7b49\u4e8e\u603b\u6307\u4ee4\u6570\u91cf\u4e58\u4ee5\u6bcf\u4e00\u4e2a\u6307\u4ee4\u6240\u5bf9\u5e94\u7684\u5468\u671f\u6570\u91cf</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u5c06 CPU \u7684\u8fd0\u884c\u65f6\u95f4\u5199\u4f5c\u4e0b\u5217\u65b9\u5f0f $$ CPU\\;time=Instruction\\;count \\times CPI \\times Clock\\;cycle\\;time=\\frac {Instruction\\;count \\times CPI}{Clock\\;rate} $$</p>"},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#amdahls-law","title":"Amdahl's Law","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#eight-great-ideas","title":"Eight Great Ideas","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/first/#homework","title":"Homework","text":"<p>\u8f6c\u6210pdf\u4e0a\u4f20\u5b66\u5728\u6d59\u5927</p>"},{"location":"blog/%E8%AE%A1%E7%BB%84/second/","title":"Arithmetic for Computer","text":"<p>## Computer words</p> <p></p>"},{"location":"blog/%E8%AE%A1%E7%BB%84/second/#_1","title":"\u8865\u7801\u7684\u4e00\u4e9b\u7b80\u5355\u64cd\u4f5c","text":"<p>\u8865\u7801\u53ef\u4ee5\u76f8\u52a0\u3001\u76f8\u51cf\uff0c\u76f8\u4e58\uff08\u8865\u4f4d\u6570\uff09</p>"},{"location":"blog/%E8%AE%A1%E7%BB%84/second/#_2","title":"\u6ea2\u51fa","text":"<ul> <li>\u68c0\u6d4b\u662f\u5426\u6ea2\u51fa\uff1a\u89c2\u5bdf\u6700\u9ad8\u4f4d\u3001\u6b21\u9ad8\u4f4d\u8fdb\u4f4d\u7684\u5f02\u6216\uff0c\u82e5\u662f1\uff0c\u5219\u6ea2\u51fa\uff1b\u5426\u5219\u6ca1\u6709</li> </ul> <ul> <li>\u5c06\u7ed3\u679c\u6269\u5c55\u4e00\u4f4d\u518d\u8fdb\u884c\u5224\u65ad</li> </ul>"},{"location":"blog/%E8%AE%A1%E7%BB%84/second/#constructiong-ans-alu","title":"Constructiong ans ALU","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/second/#_3","title":"\u5168\u52a0\u5668","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/second/#1-bit-alu","title":"1 bit ALU","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/second/#subtraction","title":"Subtraction","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/second/#_4","title":"\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/second/#carry-select-adder","title":"Carry select adder","text":""},{"location":"blog/%E8%AE%A1%E7%BB%84/second/#multiplier","title":"Multiplier","text":""},{"location":"blog/%E9%A9%AC%E5%8E%9F/","title":"\u8bfe\u7a0b\u4ecb\u7ecd","text":""},{"location":"blog/%E9%A9%AC%E5%8E%9F/#_2","title":"\u6210\u7ee9\u6784\u6210","text":"<ul> <li>\u5e73\u65f6\u6210\u7ee950%\uff0c\u671f\u672b50%</li> <li>\u671f\u672b\u95ed\u5377\u8003\u8bd5\uff0c\u6210\u7ee9\u9700\u8981\u9ad8\u4e8e40\u5206</li> <li>\u7b54\u9898\u7684\u987a\u5e8f\u3001\u5185\u5bb9\u4e0d\u4f1a\u53d8</li> </ul>"},{"location":"blog/%E9%A9%AC%E5%8E%9F/#_3","title":"\u5e73\u65f6\u6210\u7ee9","text":"<ul> <li>\u6559\u5e08\u7efc\u5408\u8bc4\u5206\u4f1a\u7ed9\u6ee1(10\u5206)\uff0c\u524d\u63d0\u662f\u9700\u8981\u5230\u4e00\u6b21</li> </ul>"},{"location":"blog/%E9%A9%AC%E5%8E%9F/#_4","title":"\u8bfb\u4e66\u62a5\u544a","text":""},{"location":"blog/%E9%A9%AC%E5%8E%9F/#_5","title":"\u4e66\u5355","text":"<p>\u300a\u7406\u60f3\u56fd\u300b\u300a\u7b2c\u4e00\u54f2\u5b66\u6c89\u601d\u96c6\u300b\u300a\u5076\u50cf\u7684\u9ec4\u660f\u300b\u300a\u54f2\u5b66\u5bfc\u8bba\u300b\u300a\u4e2d\u56fd\u54f2\u5b66\u53f2\u300b</p>"},{"location":"blog/%E9%A9%AC%E5%8E%9F/#_6","title":"\u4e2a\u4eba\u8868\u73b0\u7c7b","text":"<ul> <li>\u5c0f\u6d4b1\u6b21\uff0c\u8bba\u8ff0\u9898\uff0c\u5f00\u5377\uff0c\u5b66\u8fc7\u7684\uff0c\u4f1a\u6709\u901a\u77e5</li> <li>\u8003\u52e4\u6765\u4e24\u6b21\u5c31\u53ef\u4ee5\u4e86</li> </ul>"},{"location":"blog/%E9%A9%AC%E5%8E%9F/#_7","title":"\u5c0f\u7ec4\u5c55\u793a\u7c7b","text":"<ul> <li>\u9009\u9898\u9700\u8981\u5411\u52a9\u6559\u6c47\u62a5</li> <li>\u5c55\u793a\u57fa\u51c6\u5206\u657025\u5206</li> <li>\u6574\u4e2a\u5c0f\u7ec4\u4e00\u4e2a\u5206\u6570</li> </ul>"},{"location":"blog/%E9%A9%AC%E5%8E%9F/#_8","title":"\u8bfe\u7a0b\u6784\u6210","text":"<ul> <li>\u79d1\u5b66\u793e\u4f1a\u4e3b\u4e49\u653e\u5728\u5bfc\u8bba\u91cc\u9762\u8bb2</li> </ul>"},{"location":"blog/%E9%A9%AC%E5%8E%9F/#_9","title":"\u8bfe\u7a0b\u5b89\u6392","text":""}]}